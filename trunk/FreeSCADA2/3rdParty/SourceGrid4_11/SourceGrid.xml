<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SourceGrid</name>
    </assembly>
    <members>
        <member name="T:SourceGrid.Selection.SelectionBase">
            <summary>
            Base selection class
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.BindToGrid(SourceGrid.GridVirtual)">
            <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
            <param name="p_grid"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.UnBindToGrid">
            <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.Focus(SourceGrid.Position,System.Boolean)">
            <summary>
            Change the ActivePosition (focus) of the grid.
            </summary>
            <param name="pCellToActivate"></param>
            <param name="pResetSelection">True to deselect the previous selected cells</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.FocusFirstCell(System.Boolean)">
            <summary>
            Set the focus on the first available cells starting from the not fixed cells.
            If there is an active selection set the focus on the first selected cells.
            </summary>
            <param name="pResetSelection"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.FocusColumn(System.Int32)">
            <summary>
            Move the Focus to the first cell that can receive the focus of the current column otherwise put the focus to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.FocusRow(System.Int32)">
            <summary>
            Move the Focus to the first cell that can receive the focus of the current row otherwise put the focus to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.CanReceiveFocus(SourceGrid.Position)">
            <summary>
            Returns true if the specified position can receive the focus.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnFocusRowLeaving(SourceGrid.RowCancelEventArgs)">
            <summary>
            Fired before a row lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnFocusRowEntered(SourceGrid.RowEventArgs)">
            <summary>
            Fired after a row receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnFocusColumnLeaving(SourceGrid.ColumnCancelEventArgs)">
            <summary>
            Fired before a column lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnFocusColumnEntered(SourceGrid.ColumnEventArgs)">
            <summary>
            Fired after a column receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnCellGotFocus(SourceGrid.ChangeActivePositionEventArgs)">
            <summary>
            Fired when a cell receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnCellLostFocus(SourceGrid.ChangeActivePositionEventArgs)">
            <summary>
            Fired when a cell lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <param name="rowShift"></param>
            <param name="colShift"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(SourceGrid.Position,System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified. Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <param name="start"></param>
            <param name="rowShift"></param>
            <param name="colShift"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified.
            Try to set the focus using the first shift, if failed try to use the second shift (rowShift2, colShift2). 
            If rowShift2 or colShift2 is int.MaxValue the next start position is the maximum row or column, if is int.MinValue 0 is used, otherwise the current position is shifted using the specified value.
            This method is usually used for the Tab navigation using this code : MoveActiveCell(0,1,1,0);
            Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.MoveActiveCell(SourceGrid.Position,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the active cell (focus), moving the row and column as specified.
            Try to set the focus using the first shift, if failed try to use the second shift (rowShift2, colShift2). 
            If rowShift2 or colShift2 is int.MaxValue the next start position is the maximum row or column, if is int.MinValue 0 is used, otherwise the current position is shifted using the specified value.
            This method is usually used for the Tab navigation using this code : MoveActiveCell(0,1,1,0);
            Returns true if the focus can be moved.
            Returns false if there aren't any cell to move.
            </summary>
            <param name="start"></param>
            <param name="rowShift1"></param>
            <param name="colShift1"></param>
            <param name="rowShift2"></param>
            <param name="colShift2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.Invalidate">
            <summary>
            Invalidate all the selected cells
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedColumn(System.Int32)">
            <summary>
            Check if the column is selected. Returns true if one or more row of the column is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.SelectColumn(System.Int32,System.Boolean)">
            <summary>
            Select or unselect the specified column
            </summary>
            <param name="column"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedRow(System.Int32)">
            <summary>
            Check if the row is selected. Returns true if one or more column of the row is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.SelectRow(System.Int32,System.Boolean)">
            <summary>
            Select or unselect the specified row
            </summary>
            <param name="row"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedCell(SourceGrid.Position)">
            <summary>
            Check if the cell is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.SelectCell(SourceGrid.Position,System.Boolean)">
            <summary>
            Select or unselect the specified cell
            </summary>
            <param name="position"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsSelectedRange(SourceGrid.Range)">
            <summary>
            Check if the range is selected.
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.SelectRange(SourceGrid.Range,System.Boolean)">
            <summary>
            Select or unselect the specified range
            </summary>
            <param name="range"></param>
            <param name="select"></param>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.OnResetSelection">
            <summary>
            Reset the selection
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.ResetSelection(System.Boolean)">
            <summary>
            Reset the selection
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IsEmpty">
            <summary>
            Returns true if the selection is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.GetSelectionRegion">
            <summary>
            Returns the selected region.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.IntersectsWith(SourceGrid.Range)">
            <summary>
            Returns true if the specified selection intersect with the range
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.SelectionBase.ValidateRange(SourceGrid.Range)">
            <summary>
            Check if the range can be selected
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.Grid">
            <summary>
            The Grid object
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.ActivePosition">
            <summary>
            Gets the active cell position. The cell with the focus.
            Returns Position.Empty if there isn't an active cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.FocusBackColor">
            <summary>
            Gets or sets the backColor of the cell with the Focus. Default is Color.Transparent.
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.FocusStyle">
            <summary>
            Gets or sets the behavior of the focus and selection. Default is FocusStyle.Default.
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.CellGotFocus">
            <summary>
            Fired before a cell receive the focus (FocusCell is populated after this event, use e.Cell to read the cell that will receive the focus)
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.CellLostFocus">
            <summary>
            Fired before a cell lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.FocusRowLeaving">
            <summary>
            Fired before a row lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.FocusRowEntered">
            <summary>
            Fired after a row receive the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.FocusColumnLeaving">
            <summary>
            Fired before a column lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.FocusColumnEntered">
            <summary>
            Fired after a column receive the focus
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.EnableMultiSelection">
            <summary>
            Gets or sets if enable multi selection using Ctrl key or Shift Key or with mouse. Default is true.
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.BackColor">
            <summary>
            Gets or set the highlight backcolor.
            Usually is a color with a transparent value so you can see the color of the cell. Default is: Color.FromArgb(75, Color.FromKnownColor(KnownColor.Highlight))
            </summary>
        </member>
        <member name="P:SourceGrid.Selection.SelectionBase.Border">
            <summary>
            The Border used to highlight the range
            </summary>
        </member>
        <member name="E:SourceGrid.Selection.SelectionBase.SelectionChanged">
            <summary>
            Fired after when the selection change (added or removed).
            If you need more control over the selection I suggest to create a custom Selection class.
            </summary>
        </member>
        <member name="T:SourceGrid.Position">
            <summary>
            Represents a cell position (Row, Col). Once created connot be modified
            </summary>
        </member>
        <member name="F:SourceGrid.Position.c_EmptyIndex">
            <summary>
            An empty index constant
            </summary>
        </member>
        <member name="M:SourceGrid.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="F:SourceGrid.Position.Empty">
            <summary>
            Empty position
            </summary>
        </member>
        <member name="M:SourceGrid.Position.IsEmpty">
            <summary>
            Returns true if the current struct is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.Equals(SourceGrid.Position)">
            <summary>
            
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.op_Equality(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.op_Inequality(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.Min(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Returns a position with the smaller Row and the smaller column
            </summary>
            <param name="p_Position1"></param>
            <param name="p_Position2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Position.Max(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Returns a position with the bigger Row and the bigger column
            </summary>
            <param name="p_Position1"></param>
            <param name="p_Position2"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Position.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="P:SourceGrid.Position.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="P:SourceGrid.Decorators.DecoratorHighlight.Range">
            <summary>
            Gets or sets the range to draw
            </summary>
        </member>
        <member name="T:SourceGrid.RangeData">
            <summary>
            RangeData class represents a range of data. Can represent a range of data in string format. Usually used for drag and drop and clipboard copy/paste operations.
            See Controllers\Clipboard, Controllers\SelectionDrag and Controllers\SelectionDrop.
            </summary>
        </member>
        <member name="F:SourceGrid.RangeData.RANGEDATA_FORMAT">
            <summary>
            The string constant used with the System.Windows.Forms.DataFormats.GetFormat to register the clipboard format RangeData object.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.LoadData(SourceGrid.GridVirtual,SourceGrid.Range,SourceGrid.Position,SourceGrid.CutMode)">
            <summary>
            Load the specified range data into a string array. This method use the cell editor to get the value.
            </summary>
            <param name="sourceGrid"></param>
            <param name="sourceRange"></param>
            <param name="startDragPosition">Starting drag position. Used only for calculating drop destination range.</param>
            <param name="cutMode">Cut mode. Can be used to remove the data from the source when pasting it to the destination or immediately.</param>
        </member>
        <member name="M:SourceGrid.RangeData.LoadData(System.String)">
            <summary>
            Load the data from a Tab delimited string of data. Each column is separated by a Tab and each row by a LineFeed character.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeData.WriteData(SourceGrid.GridVirtual,SourceGrid.Range)">
            <summary>
            Write the current loaded array string in the specified grid range. This method use the cell editor to set the value. 
            </summary>
            <param name="destinationGrid"></param>
            <param name="destinationRange"></param>
        </member>
        <member name="M:SourceGrid.RangeData.StringToData(System.String,SourceGrid.Range@,System.String[0:,0:]@)">
            <summary>
            Convert a string buffer into a Range object and an array of string.
            </summary>
            <param name="data"></param>
            <param name="range"></param>
            <param name="values"></param>
        </member>
        <member name="M:SourceGrid.RangeData.DataToString(System.String[0:,0:],SourceGrid.Range)">
            <summary>
            Convert a range and an array of string into a string. Normally using a tab delimited for columns and a LineFeed for rows.
            </summary>
            <param name="values"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeData.FindDestinationRange(SourceGrid.GridVirtual,SourceGrid.Position)">
            <summary>
            Calculate the destination range for the drop or paste operations.
            </summary>
            <param name="destinationGrid"></param>
            <param name="dropDestination"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeData.ClipboardSetData(SourceGrid.RangeData)">
            <summary>
            Copy the specified RangeData object the the clipboard
            </summary>
            <param name="rangeData"></param>
        </member>
        <member name="M:SourceGrid.RangeData.ClipboardGetData">
            <summary>
            Get a RangeData object from the clipboard. Return null if the clipboard doesn't contains valid data formats.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.RangeData.SourceRange">
            <summary>
            Range source
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.SourceValues">
            <summary>
            String array for values.
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.StartDragPosition">
            <summary>
            Starting drag position. Used only for calculating drop destination range.
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.SourceGrid">
            <summary>
            Working grid.
            </summary>
        </member>
        <member name="P:SourceGrid.RangeData.CutMode">
            <summary>
            Cut mode. Default is none.
            </summary>
        </member>
        <member name="T:SourceGrid.RowEventArgs">
            <summary>
            EventArgs used by the FocusRowEnter
            </summary>
        </member>
        <member name="M:SourceGrid.RowEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pRow"></param>
        </member>
        <member name="P:SourceGrid.RowEventArgs.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="T:SourceGrid.RowEventHandler">
            <summary>
            EventHandler used by the FocusRowEnter
            </summary>
        </member>
        <member name="T:SourceGrid.RowCancelEventArgs">
            <summary>
            EventArgs used by the FocusRowLeaving
            </summary>
        </member>
        <member name="M:SourceGrid.RowCancelEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pRow"></param>
        </member>
        <member name="P:SourceGrid.RowCancelEventArgs.Cancel">
            <summary>
            Row
            </summary>
        </member>
        <member name="T:SourceGrid.RowCancelEventHandler">
            <summary>
            EventHandler used by the FocusRowLeaving
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnEventArgs">
            <summary>
            EventArgs used by the FocusColumnEnter
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pColumn"></param>
        </member>
        <member name="P:SourceGrid.ColumnEventArgs.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnEventHandler">
            <summary>
            EventHandled used by the FocusColumnEnter
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnCancelEventArgs">
            <summary>
            EventArgs used by the FocusColumnLeaving
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnCancelEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pColumn"></param>
        </member>
        <member name="P:SourceGrid.ColumnCancelEventArgs.Cancel">
            <summary>
            Column
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnCancelEventHandler">
            <summary>
            EventHandled used by the FocusColumnLeave and FocusColumnEnter
            </summary>
        </member>
        <member name="T:SourceGrid.ChangeActivePositionEventArgs">
            <summary>
            Cell Lost Focus event arguments with the old position and the new position. Extends PositionCancelEventArgs.
            </summary>
        </member>
        <member name="M:SourceGrid.ChangeActivePositionEventArgs.#ctor(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Constructor
            </summary>
            <param name="pOldFocusPosition"></param>
            <param name="pNewFocusPosition">If Empty there isn't a cell that will receive the focus.</param>
        </member>
        <member name="P:SourceGrid.ChangeActivePositionEventArgs.OldFocusPosition">
            <summary>
            Position that had the focus
            </summary>
        </member>
        <member name="P:SourceGrid.ChangeActivePositionEventArgs.NewFocusPosition">
            <summary>
            Position that will receive the focus. If Empty there isn't a cell that will receive the focus.
            </summary>
        </member>
        <member name="T:SourceGrid.RangeRegionChangedEventArgs">
            <summary>
            Represents the event arguments used when changing a RangeRegion class (like the selection class).
            </summary>
        </member>
        <member name="M:SourceGrid.RangeRegionChangedEventArgs.#ctor(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Constructor
            </summary>
            <param name="addedRange"></param>
            <param name="removedRange"></param>
        </member>
        <member name="M:SourceGrid.RangeRegionChangedEventArgs.#ctor(SourceGrid.RangeRegion,SourceGrid.RangeRegion)">
            <summary>
            Constructor
            </summary>
            <param name="addedRange">Use null if the added range is empty</param>
            <param name="removedRange">Use null if the removed range is empty</param>
        </member>
        <member name="P:SourceGrid.RangeRegionChangedEventArgs.AddedRange">
            <summary>
            Null if the added range is empty
            </summary>
        </member>
        <member name="P:SourceGrid.RangeRegionChangedEventArgs.RemovedRange">
            <summary>
            Null if the removed range is empty
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.ICellVirtual">
            <summary>
            Interface to represents a cell virtual (without position or value information).
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.AddController(SourceGrid.Cells.Controllers.IController)">
            <summary>
            Add the specified controller.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.RemoveController(SourceGrid.Cells.Controllers.IController)">
            <summary>
            Remove the specifed controller
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.FindController(System.Type)">
            <summary>
            Find the specified controller. Returns null if not found.
            </summary>
            <param name="pControllerType"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.ICellVirtual.Copy">
            <summary>
            Create a shallow copy of the current object. Note that this is not a deep clone, all the reference are the same.
            Use internally MemberwiseClone method.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.ICellVirtual.Editor">
            <summary>
            Editor of this cell and others cells. If null no edit is supported. 
             You can share the same model between many cells to optimize memory size. Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICellVirtual.Controller">
            <summary>
            Controller of the cell. Represents the actions of a cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICellVirtual.View">
            <summary>
            Visual properties of this cell and other cell. You can share the VisualProperties between many cell to optimize memory size.
            Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICellVirtual.Model">
            <summary>
            Model that contains the data of the cells. Cannot be null.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBoxUITypeEditor">
            <summary>
             An editor that use a UITypeEditor to edit the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBoxButton">
            <summary>
            An editor that use a TextBoxTypedButton for editing.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.EditorControlBase">
            <summary>
            The base class for all the editors that have a control
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.EditorBase">
            <summary>
            Represents the base class of a DataModel. This DataModel support conversion but doesn't provide any user interface editor.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate StringEditor property
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.SetEditCell(SourceGrid.CellContext)">
            <summary>
            Set the current editing cell, for an editor only one cell can be in editing state
            </summary>
            <param name="cellContext"></param>
        </member>
        <member name="F:SourceGrid.Cells.Editors.EditorBase.m_ErrorString">
            <summary>
            Error rappresentation
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.IsErrorString(System.String)">
            <summary>
            Returns true if the string passed is equal to the error string rappresentation
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.InternalStartEdit(SourceGrid.CellContext)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use CellContext.StartEdit.
            </summary>
            <param name="cellContext">Cell to start edit</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.ApplyEdit">
            <summary>
            Apply edited value
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.InternalEndEdit(System.Boolean)">
            <summary>
            Cancel the edit action. Do not call this method directly, use the CellContext.EndEdit instead.
            </summary>
            <param name="cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
            <returns>Returns true if the cell terminate the editing mode</returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.GetEditedValue">
            <summary>
            Returns the new value edited with the custom control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.ClearCell(SourceGrid.CellContext)">
            <summary>
            Clear the value of the cell using the default value
            </summary>
            <param name="cellContext"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.SetCellValue(SourceGrid.CellContext,System.Object)">
            <summary>
            Change the value of the cell applying the rule of the current editor. Is recommend to use this method to simulate a edit operation and to validate the cell value using the current model.
            Doesn't call the StartEdit and EndEdit but change directly the cell value. Use the CellContext.Start edit to begin an edit operation.
            </summary>
            <param name="cellContext">Cell to change the value</param>
            <param name="p_NewValue"></param>
            <returns>returns true if the value passed is valid and has been applied to the cell</returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.OnValidated(SourceGrid.CellContextEventArgs)">
            <summary>
            Functions used when the validating operation is finished
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.OnValidating(SourceGrid.ValidatingCellEventArgs)">
            <summary>
            Validating the value of the cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.OnEditException(SourceGrid.ExceptionEventArgs)">
            <summary>
            Event fired when an exception is throw in the Validated event or in an editing method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.SendCharToEditor(System.Char)">
            <summary>
            Used to send some keyboard keys to the active editor. It is only valid when there is an active edit operations.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorBase.GetMinimumSize(SourceGrid.CellContext)">
            <summary>
            Calculate the minimum required size for the specified editor cell.
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EditCellContext">
            <summary>
            Cell in editing, if null no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EditCell">
            <summary>
            Cell in editing, if null no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EditPosition">
            <summary>
            Cell in editing, if Empty no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.ErrorString">
            <summary>
            String used when error occurred
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EnableEdit">
            <summary>
            Enable or disable the cell editor (if disable no visual edit is allowed)
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EditableMode">
            <summary>
            Mode to edit the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.EnableCellDrawOnEdit">
            <summary>
            Indicates if the draw of the cell when in editing mode is enabled.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.UseCellViewProperties">
            <summary>
            Gets or sets if the editor must assign to the editor control the default view properties: ForeColor, BackColor, Font. This can be disabled if you want to manually assign these properties to the control.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorBase.IsEditing">
            <summary>
            Indicates if the current editor is in editing state
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Editors.EditorBase.Validating">
            <summary>
            Validating event
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Editors.EditorBase.Validated">
            <summary>
            Validated event
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Editors.EditorBase.EditException">
            <summary>
            Event fired when an exception is throw in the Validated event or in an editing method
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.CreateControl">
            <summary>
            Abstract method that must create a new Control used for the editing operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.IsControlAttached">
            <summary>
            Check if the Control is attached to a grid.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.AttachControl(SourceGrid.GridVirtual)">
            <summary>
            Add the Control to the specified grid. Consider that a Control can only be a child of one Container.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InternalStartEdit(SourceGrid.CellContext)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use CellContext.StartEdit.
            </summary>
            <param name="cellContext">Cell to start edit</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start. You can override this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.ApplyEdit">
            <summary>
            Apply edited value without stop the editing.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.Cells.Editors.EditorControlBase.mIsInsideEndEdit">
            <summary>
            Variable that indicate if the InternalEndEdit method is already called. Is used because the InternalEndEdit can be called by a the Control_Validated or directly by the user.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InternalEndEdit(System.Boolean)">
            <summary>
            Terminate the edit action. Do not call this method directly, use the CellContext.EndEdit instead.
            </summary>
            <param name="cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
            <returns>Returns true if the cell terminate the editing mode</returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.InnerControl_Validated(System.Object,System.EventArgs)">
            <summary>
            Validated of the editor control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.UndoEditValue">
            <summary>
            Undo the edit value of the control to the initial value of the cell, usually used when pressing Esc key or terminate the edit operation with Cancel true.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SafeSetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control calling the SetEditValue method. If an exception is throwed calls the OnUserException method and set the default value.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.SendCharToEditor(System.Char)">
            <summary>
            Used to send some keyboard keys to the active editor. It is only valid when there is an active edit operations.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.OnSendCharToEditor(System.Char)">
            <summary>
            Method used to precess the key sended.
            Abstract method that must be override in the derived class
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.EditorControlBase.GetMinimumSize(SourceGrid.CellContext)">
            <summary>
            Calculate the minimum required size for the specified editor cell.
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorControlBase.Control">
            <summary>
            The Control used to edit the Cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Editors.EditorControlBase.Grid">
            <summary>
            The grid used by this editor. Null if the editor is not attached on a grid.
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Editors.EditorControlBase.KeyPress">
            <summary>
            KeyPress event is fired in 2 cases: when the Control.KeyPress event is executed and when the user start to editing the cell by pressing a key (calling SendCharToEditor)
            Set the e.Handled property to true to block the event
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxButton.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TextBoxButton.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxUITypeEditor.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxUITypeEditor.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TextBoxUITypeEditor.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Grid">
            <summary>
            The mai grid control with static data.
            </summary>
        </member>
        <member name="T:SourceGrid.GridVirtual">
            <summary>
            A abstract Grid control to support large virtual data. You must override: GetCell, CreateRowsObject, CreateColumnsObject
            </summary>
        </member>
        <member name="T:SourceGrid.CustomScrollControl">
            <summary>
            A control with a custom implementation of a scrollable area
            </summary>
        </member>
        <member name="F:SourceGrid.CustomScrollControl.mBottomRightPanel">
            <summary>
            Panel showed on the bottom right of the grid when both scrollbars are visible
            </summary>
        </member>
        <member name="F:SourceGrid.CustomScrollControl.panelDockBottom">
            <summary>
            Internal panel that contains hScrollBar and mBottomRightPanel
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.InvalidateScrollableArea">
            <summary>
            Invalidate the scrollable area
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.PrepareScrollBars(System.Boolean,System.Boolean)">
            <summary>
            Prepare the scrollbars with the specified dock option.
            </summary>
            <param name="showHScroll"></param>
            <param name="showVScroll"></param>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.LoadScrollArea(System.Int32,System.Int32)">
            <summary>
            Load the scrollable area that will affect the maximum scroll values.
            </summary>
            <param name="scrollArea"></param>
            <param name="verticalPage"></param>
            <param name="horizontalPage"></param>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.RecalcHScrollBar(System.Int32)">
            <summary>
            recalculate the position of the horizontal scrollbar
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.RecalcVScrollBar(System.Int32)">
            <summary>
            Recalculate the position of the vertical scrollbar
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.RecalcCustomScrollBars">
            <summary>
            Recalculate the scrollbars position and size.
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.GetScrollRows(System.Int32)">
            <summary>
            Calculate the number of rows to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of rows and the available area.
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.GetScrollColumns(System.Int32)">
            <summary>
            Calculate the number of columns to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of columns and the available area.
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            OnLayout Method
            </summary>
            <param name="levent"></param>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.OnVScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            Fired when the scroll vertical posizion change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.OnHScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            Fired when the scroll horizontal posizion change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageDown">
            <summary>
            Scroll the page down
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageUp">
            <summary>
            Scroll the page up
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageRight">
            <summary>
            Scroll the page right
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollPageLeft">
            <summary>
            Scroll the page left
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineDown">
            <summary>
            Scroll the page down one line
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineUp">
            <summary>
            Scroll the page up one line
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineRight">
            <summary>
            Scroll the page right one line
            </summary>
        </member>
        <member name="M:SourceGrid.CustomScrollControl.CustomScrollLineLeft">
            <summary>
            Scroll the page left one line
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.AutoScroll">
            <summary>
            I disabled the default AutoScroll property because I have a custom implementation
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.VScrollBar">
            <summary>
            Gets the vertical scrollbar. Can be visible or unvisible.
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.HScrollBar">
            <summary>
            Gets the horizontal scrollbar. Can be visible or unvisible.
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.BottomRightPanel">
            <summary>
            Gets the panel at the bottom right of the control. This panel is valid only if HScrollBar and VScrollBar are valid. Otherwise is null.
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.CustomScrollPosition">
            <summary>
            Gets or sets the current scroll position relative to the CustomScrollArea. 
            The value must be always between 0 and CustomScrollArea (0 or positive).
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.DisplayRectangle">
            <summary>
            Display rectangle of the control, without ScrollBars. 
            Note: I don't override this method because I use some dock feature that require the real display rectangle.
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.MaximumVScroll">
            <summary>
            Return the maximum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.MinimumVScroll">
            <summary>
            Return the minimum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.MinimumHScroll">
            <summary>
            Return the minimum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid.CustomScrollControl.MaximumHScroll">
            <summary>
            Return the maximum position that can be scrolled
            </summary>
        </member>
        <member name="E:SourceGrid.CustomScrollControl.VScrollPositionChanged">
            <summary>
            Fired when the scroll vertical posizion change
            </summary>
        </member>
        <member name="E:SourceGrid.CustomScrollControl.HScrollPositionChanged">
            <summary>
            Fired when the scroll horizontal posizion change
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.#ctor">
            <summary>
            Grid constructor
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.CreateRowsObject">
            <summary>
            Abstract method used to create the rows object.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.CreateColumnsObject">
            <summary>
            Abstract method used to create the columns object.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.AutoSizeCells(SourceGrid.Range)">
            <summary>
            Auto size the columns and the rows speified
            </summary>
            <param name="p_RangeToAutoSize"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.AutoSizeCells">
            <summary>
            Auto size all the columns and all the rows with the required width and height
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.CheckPositions">
            <summary>
            Check if the positions saved are still valid, for example if all the selected cells are still valid positions, if not the selection are removed without calling any other methods.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.PositionToRectangle(SourceGrid.Position)">
            <summary>
            Get the rectangle of the cell respect to the client area visible, the grid DisplayRectangle.
            Returns Rectangle.Empty if the Position is empty or if is not valid.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.PositionAtPoint(System.Drawing.Point)">
            <summary>
            Returns the cell at the specified grid view relative point (the point must be relative to the grid display region), SearchInFixedCells = true. Return Position.Empty if no valid cells are found.
            </summary>
            <param name="point">Point relative to the DisplayRectangle area.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.RangeToRectangle(SourceGrid.Range)">
            <summary>
            Returns the relative rectangle to the current scrollable area of the specified Range.
            Returns a Rectangle.Empty if the Range is not valid. 
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.RangeAtArea(SourceGrid.CellPositionType)">
            <summary>
            Get the range of cells at the specified dispaly area.
            This method consider only the visible cells using the current scroll position.
            Returns a single Range for the specified grid area (scrollable, fixedtop, fixedleft, fixedtopleft).
            Returns Range.Empty if there isn't a valid range in the specified area.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetVisibleRegion">
            <summary>
            Get the visible ranges. Returns a list of Range, one for each area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetScrollRows(System.Int32)">
            <summary>
            Calculate the number of rows to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of rows and the available area.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetScrollColumns(System.Int32)">
            <summary>
            Calculate the number of columns to scroll. 0 to disable the scrollbar.
            The returned value is independent from the current scrolling position, must be a fixed value
            calculated based on the total number of columns and the available area.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.IsCellVisible(SourceGrid.Position,System.Boolean)">
            <summary>
            Indicates if the specified cell is visible.
            </summary>
            <param name="position"></param>
            <param name="partial">True to returns also partial visible cells</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetScrollPositionToShowCell(SourceGrid.Position,System.Boolean,System.Drawing.Point@)">
            <summary>
            Return the scroll position that must be set to show a specific cell.
            </summary>
            <param name="position"></param>
            <param name="partial">True to consider also partial visible cells</param>
            <param name="newScrollPosition"></param>
            <returns>Return false if the cell is already visible, return true is the cell is not currently visible.</returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.ShowCell(SourceGrid.Position,System.Boolean)">
            <summary>
            Scroll the view to show the cell passed. Ensure that if the cell if invisible or partial visible it will be totally visible
            </summary>
            <param name="p_Position"></param>
            <param name="ignorePartial">true to ignore and consider already visible partial visible cells</param>
            <returns>Returns true if the Cell passed was already visible, otherwise false</returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.InvalidateCell(SourceGrid.Position)">
            <summary>
            Force a cell to redraw.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.InvalidateRange(SourceGrid.Range)">
            <summary>
            Force a range of cells to redraw.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.ScrollOnPoint(System.Drawing.Point)">
            <summary>
            Move the scrollbars to the direction specified by the point specified.
            Method used by the Mouse multi selection (MouseSelection.cs)
            </summary>
            <param name="mousePoint"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.InvalidateScrollableArea">
            <summary>
            Invalidate the cells
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.PositionToStartPosition(SourceGrid.Position)">
            <summary>
            This method converts a Position to the real start position of cell. This is usefull when RowSpan or ColumnSPan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0 and if you call this method with 0,1 return again 0,0.
            Get the real position for the specified position. For example when p_Position is a merged cell this method returns the starting position of the merged cells.
            Usually this method returns the same cell specified as parameter. This method is used for processing arrow keys, to find a valid cell when the focus is in a merged cell.
            For this class returns always p_Position.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.PositionToCellRange(SourceGrid.Position)">
            <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0-0,1 and if you call this method with 0,1 return again 0,0-0,1.
            </summary>
            <param name="pPosition"></param>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.GridVirtual.mDragCellPosition">
            <summary>
            Indica la cella che ha subito l'ultimo evento di DragEnter
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ChangeDragCell(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            Fired when the cell in the drag events change. For internal use only.
            </summary>
            <param name="cell"></param>
            <param name="pDragEventArgs"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.CreateSelectionObject">
            <summary>
            Virtual factory method used to create the SelectionBase derived object.
            The base method create a different object based on the value of SelectionMode property.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.GridVirtual.m_MouseDownPosition">
            <summary>
            Represents the cell that receive the mouse down event
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ChangeMouseCell(SourceGrid.Position)">
            <summary>
            Fired when the cell under the mouse change. For internal use only.
            </summary>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.ChangeMouseDownCell(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Change the cell currently under the mouse
            </summary>
            <param name="p_MouseDownCell"></param>
            <param name="p_MouseCell"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnMouseSelectionFinish(SourceGrid.RangeEventArgs)">
            <summary>
            Fired when the selection eith the mouse is finished
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnUndoMouseSelection(SourceGrid.RangeEventArgs)">
            <summary>
            Fired when the mouse selection must be canceled. See also MouseSelectionRange.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnApplyMouseSelection(SourceGrid.RangeEventArgs)">
            <summary>
            Fired when the mouse selection is succesfully finished. See also MouseSelectionRange.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnMouseSelectionChange(System.EventArgs)">
            <summary>
            Fired when the mouse selection change. See also MouseSelectionRange.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.MouseSelectionFinish">
            <summary>
            Fired when the mouse selection finish. See also MouseSelectionRange.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.ChangeMouseSelectionCorner(SourceGrid.Position)">
            <summary>
            Fired when the corner of the mouse selection change. For internal use only.
            </summary>
            <param name="p_Corner"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes a command key. 
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.ProcessSpecialGridKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Process Delete, Ctrl+C, Ctrl+V, Up, Down, Left, Right, Tab keys 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Allow the grid to handle specials keys like Arrows and Tab. See also Grid.SpecialKeys
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.IsInputChar(System.Char)">
            <summary>
            IsInputChar method.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.PaintCell(DevAge.Drawing.GraphicsCache,SourceGrid.CellContext,System.Drawing.RectangleF)">
            <summary>
            Draw the specified Cell
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when a user scroll with the mouse wheel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnHScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            OnHScrollPositionChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnVScrollPositionChanged(SourceGrid.ScrollPositionChangedEventArgs)">
            <summary>
            OnVScrollPositionChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.ArrangeLinkedControls">
            <summary>
            Refresh the linked controls bounds
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.PerformStretch">
            <summary>
            Recalculate the scrollbar position and value based on the current cells, scroll client area, linked controls and more. If redraw == false this method has not effect.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnCellsAreaChanged">
            <summary>
            Force to recalculate scrollbars and panels location. Used usually after changing width and height of the columns / rows, or after adding or removing rows and columns.
            </summary>
        </member>
        <member name="M:SourceGrid.GridVirtual.SortRangeRows(SourceGrid.IRangeLoader,System.Int32,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort a range of the grid
            </summary>
            <param name="p_RangeToSort">Range to sort</param>
            <param name="keyColumn">Index of the column relative to the grid to use as sort keys, must be between start and end col of the range</param>
            <param name="p_bAsc">Ascending true, Descending false</param>
            <param name="p_CellComparer">CellComparer, if null the default comparer will be used</param>
        </member>
        <member name="M:SourceGrid.GridVirtual.SortRangeRows(SourceGrid.Range,System.Int32,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort a range of the grid.
            </summary>
            <param name="p_Range"></param>
            <param name="keyColumn">Index of the column relative to the grid to use as sort keys, must be between start and end col</param>
            <param name="p_bAscending">Ascending true, Descending false</param>
            <param name="p_CellComparer">CellComparer, if null the default ValueCellComparer comparer will be used</param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnSortingRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            Fired when calling SortRangeRows method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnSortedRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            Fired after calling SortRangeRows method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetCell(System.Int32,System.Int32)">
            <summary>
            Return the Cell at the specified Row and Col position. Abstract, must be implemented in the derived class.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetCell(SourceGrid.Position)">
            <summary>
            Return the Cell at the specified Row and Col position. This method is called for sort operations and for Move operations. If position is Empty return null. This method calls GetCell(int p_iRow, int p_iCol)
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetCellsAtRow(System.Int32)">
            <summary>
            Returns all the cells at specified row position
            </summary>
            <param name="p_RowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetCellsAtColumn(System.Int32)">
            <summary>
            Returns all the cells at specified column position
            </summary>
            <param name="p_ColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.GetPositionType(SourceGrid.Position)">
            <summary>
            Returns the type of a cell position
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.GridVirtual.OnUserException(SourceGrid.ExceptionEventArgs)">
            <summary>
            Event fired when an exception is throw in some method that require a notification to the user.
            If not handled by the user (Handled property = false) a MessageBox is used to display the exception.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.GridVirtual.ClearValues(SourceGrid.RangeRegion)">
            <summary>
            Clear all the selected cells with a valid Model.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.DefaultHeight">
            <summary>
            Indicates the default height of new row
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.DefaultWidth">
            <summary>
            Indicates the default width of new column
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MinimumHeight">
            <summary>
            Indicates the minimum height of the rows
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MinimumWidth">
            <summary>
            Indicates the minimum width of the columns
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.AutoStretchColumnsToFitWidth">
            <summary>
            True to auto stretch the columns width to always fit the available space, also when the contents of the cell is smaller.
            False to leave the original width of the columns
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.AutoStretchRowsToFitHeight">
            <summary>
            True to auto stretch the rows height to always fit the available space, also when the contents of the cell is smaller.
            False to leave the original height of the rows
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.DragCellPosition">
            <summary>
            The last cell that has received a DragEnter event.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.Selection">
            <summary>
            Gets or sets the Selection object that represents the selected cells and the active cell.
            Use the SelectionMode property to set the type of selection (free, by row, by column).
            Override the CreateSelectionObject method to create a custom Selection class for special needs.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.SelectionMode">
            <summary>
            Gets or sets the selection mode. Changing this property cause the Selection object to be recreated, for this reason remember to set this property at the beginning of your code.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MouseDownPosition">
            <summary>
            Represents the cell that have received the MouseDown event. You can use this cell for contextmenu logic. Can be null.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MouseCellPosition">
            <summary>
            The cell position currently under the mouse cursor (row, col). 
            If you MouseDown on a cell this cell is the MouseCellPosition until an MouseUp is fired
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.MouseSelectionRange">
            <summary>
            Returns the cells that are selected with the mouse. Range.Empty if no cells are selected. Consider that this method returns valid cells only during the mouse down operations, when release the mouse the cells are selected and you can read them using Grid.Selection object.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.OverrideCommonCmdKey">
            <summary>
            True to override with the ProcessCmdKey the common Command Key: Enter, Escape, Tab
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.SpecialKeys">
            <summary>
            Special keys that the grid can handle. You can change this enum to block or allow some special keys function. For example to disable Ctrl+C Copy operation remove from this enum the GridSpecialKeys.Ctrl_C.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.AcceptsInputChar">
            <summary>
            True accepts input char when the grid has the focus. Used for example to start the edit operation without processing the char.
            If you set this property to false when the character is sended to the windows forms handler and can be used for example to execute directly some access key (shortcut keys).
            Default is true.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.LinkedControls">
            <summary>
            List of controls that are linked to a specific cell position. For example is used for editors controls. Key=Control, Value=Position. The controls are automatically removed from the list when they are removed from the Grid.Controls collection
            </summary>
        </member>
        <member name="E:SourceGrid.GridVirtual.SortingRangeRows">
            <summary>
            Fired when calling SortRangeRows method
            </summary>
        </member>
        <member name="E:SourceGrid.GridVirtual.SortedRangeRows">
            <summary>
            Fired after calling SortRangeRows method
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.FixedRows">
            <summary>
            Gets or Sets how many rows are not scrollable
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.FixedColumns">
            <summary>
            Gets or Sets how many cols are not scrollable
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.Rows">
            <summary>
            RowsCount informations
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.Columns">
            <summary>
            Columns informations
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.CompleteRange">
            <summary>
            Returns a Range that represents the complete cells of the grid
            </summary>
        </member>
        <member name="E:SourceGrid.GridVirtual.UserException">
            <summary>
            Event fired when an exception is throw in some method that require a notification to the user.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.RightToLeft">
            <summary>
            Hide the RightToLeft property and returns always No.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.ToolTipText">
            <summary>
            ToolTip text
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.ToolTip">
            <summary>
            Gets the tooltip control used when showing tooltip text.
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.Decorators">
            <summary>
            Grid decorators, used to draw additiona contents on the drawing surface
            </summary>
        </member>
        <member name="P:SourceGrid.GridVirtual.ClipboardMode">
            <summary>
            Gets or sets the clipboard operation mode. Default is none
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.CreateRowsObject">
            <summary>
            Method used to create the rows object, in this class of type RowInfoCollection.
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.CreateColumnsObject">
            <summary>
            Method used to create the columns object, in this class of type ColumnInfoCollection.
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.SetCell(System.Int32,System.Int32,SourceGrid.Cells.ICellVirtual)">
            <summary>
            Set the specified cell int he specified position. Abstract method of the GridVirtual control
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid.Grid.SetCell(SourceGrid.Position,SourceGrid.Cells.ICellVirtual)">
            <summary>
            Set the specified cell int he specified position. This method calls SetCell(int p_iRow, int p_iCol, Cells.ICellVirtual p_Cell)
            </summary>
            <param name="p_Position"></param>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid.Grid.GetCell(System.Int32,System.Int32)">
            <summary>
            Return the Cell at the specified Row and Col position.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Grid.RemoveCell(System.Int32,System.Int32)">
            <summary>
            Remove the specified cell
            </summary>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="M:SourceGrid.Grid.InsertCell(System.Int32,System.Int32,SourceGrid.Cells.ICell)">
            <summary>
            Insert the specified cell
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="p_cell"></param>
        </member>
        <member name="M:SourceGrid.Grid.Redim(System.Int32,System.Int32)">
            <summary>
            Set the number of columns and rows
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.PositionToCellRange(SourceGrid.Position)">
            <summary>
            This method converts a Position to the real range of the cell. This is usefull when RowSpan or ColumnSpan is greater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0-0,1 and if you call this method with 0,1 return again 0,0-0,1.
            </summary>
            <param name="pPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Grid.InvalidateCell(SourceGrid.Cells.ICell)">
            <summary>
            Force a redraw of the specified cell
            </summary>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid.Grid.InvalidateCell(SourceGrid.Position)">
            <summary>
            Force a cell to redraw. If ColSpan or RowSpan is greater than 0 this function invalidate the complete range with InvalidateRange
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="F:SourceGrid.Grid.mDrawnRange">
            <summary>
            List of the ranges already drawn
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.OnSortingRangeRows(SourceGrid.SortRangeRowsEventArgs)">
            <summary>
            Fired when calling SortRangeRows method. If the range contains all the columns this method move directly the row object otherwise move each cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid.Grid.ColumnsCount">
            <summary>
            Gets or Sets the number of columns
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.RowsCount">
            <summary>
            Gets or Sets the number of rows
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.Rows">
            <summary>
            RowsCount informations
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.Columns">
            <summary>
            Columns informations
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.OptimizeMode">
            <summary>
            Gets or sets the optimize mode. Default is ForRows
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.Item(System.Int32,System.Int32)">
            <summary>
            Returns or set a cell at the specified row and col. If you get a ICell position occupied by a row/col span cell, and EnableRowColSpan is true, this method returns the cell with Row/Col span.
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.MaxSpan">
            <summary>
            Gets the maximum rows or columns number to search when using Row/Col Span.
            This is a static property.
            This value is automatically calculated based on the current cells. Do not change this value manually.
            Default is 10.
            </summary>
        </member>
        <member name="P:SourceGrid.Grid.CustomSort">
            <summary>
            Gets or sets if when calling SortRangeRows method use a custom sort or an automatic sort. Default = false (automatic)
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnInfo">
            <summary>
            Column Information
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfo.#ctor(SourceGrid.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Width">
            <summary>
            Width of the current Column
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Index">
            <summary>
            Index of the current Column
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Grid">
            <summary>
            Attached Grid
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Tag">
            <summary>
            A property that the user can use to insert custom informations associated to a specific column
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.AutoSizeMode">
            <summary>
            Flags for autosize and stretch
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfo.Visible">
            <summary>
            Gets or sets if the column is visible.
            Internally set the width to 0 to hide a column.
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnInfoCollection">
            <summary>
            Collection of ColumnInfo
            </summary>
        </member>
        <member name="T:SourceGrid.ColumnsBase">
            <summary>
            Abstract base class for manage columns informations.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.GetWidth(System.Int32)">
            <summary>
            Gets the width of the specified column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.SetWidth(System.Int32,System.Int32)">
            <summary>
            Sets the width of the specified column.
            </summary>
            <param name="column"></param>
            <param name="width"></param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.MeasureColumnWidth(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Measures the current column when drawn with the specified cells.
            </summary>
            <param name="column"></param>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
            <param name="StartRow">Start row to measure</param>
            <param name="EndRow">End row to measure</param>
            <returns>Returns the required width</returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.AutoSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Auto size all the columns with the max required width of all cells.
            </summary>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
            <param name="StartRow">Start row to measure</param>
            <param name="EndRow">End row to measure</param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.StretchToFit">
            <summary>
            stretch the columns width to always fit the available space when the contents of the cell is smaller.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ColumnsInsideRegion(System.Int32,System.Int32)">
            <summary>
            Gets the columns index inside the specified display area.
            </summary>
            <param name="relativeCol"></param>
            <param name="x"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ColumnsInsideRegion(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the columns index inside the specified display area.
            The list returned is ordered by the index.
            Note that this method returns also invisible rows.
            </summary>
            <param name="returnsPartial">True to returns also partial columns</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ColumnAtPoint(System.Int32)">
            <summary>
            Calculate the Column that have the Left value smaller or equal than the point p_X, or -1 if not found found.
            </summary>
            <param name="relativeCol"></param>
            <param name="x">X Coordinate to search for a column</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ColumnsChanged">
            <summary>
            Fired when the numbes of columns changed.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.GetLeft(System.Int32)">
            <summary>
            Gets the column left position.
            The Left is relative to the specified start position.
            Calculate the left using also the FixedColumn if present.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.GetRight(System.Int32)">
            <summary>
            Gets the column right position. GetLeft + GetWidth.
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnsBase.ShowColumn(System.Int32)">
            <summary>
            Show a column (set the width to default width)
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.HideColumn(System.Int32)">
            <summary>
            Hide the specified column (set the width to 0)
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:SourceGrid.ColumnsBase.IsColumnVisible(System.Int32)">
            <summary>
            Returns true if the specified column is visible
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.ColumnsBase.FirstVisibleScrollableColumn">
            <summary>
            Returns the first visible scrollable column.
            Return null if there isn't a visible column.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.ColumnsBase.LastVisibleScrollableColumn">
            <summary>
            Returns the last visible scrollable column.
            Return null if there isn't a visible column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.#ctor(SourceGrid.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.IsValidRange(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.IsValidRangeForInsert(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid for insert method
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.InsertRange(System.Int32,SourceGrid.ColumnInfo[])">
            <summary>
            Insert the specified number of Columns at the specified position
            </summary>
            <param name="p_StartIndex"></param>
            <param name="columns"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.Remove(System.Int32)">
            <summary>
            Remove a column at the speicifed position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove the ColumnInfo at the specified positions
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.Move(System.Int32,System.Int32)">
            <summary>
            Move a column from one position to another position
            </summary>
            <param name="p_CurrentColumnPosition"></param>
            <param name="p_NewColumnPosition"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Change the position of column 1 with column 2.
            </summary>
            <param name="p_ColumnIndex1"></param>
            <param name="p_ColumnIndex2"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsAdded(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired when the number of columns change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsRemoved(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired when some columns are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.OnColumnsRemoving(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired before some columns are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.OnColumnWidthChanged(SourceGrid.ColumnInfoEventArgs)">
            <summary>
            Execute the RowHeightChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.AutoSizeView">
            <summary>
            Auto size the columns calculating the required size only on the rows currently visible
            </summary>
        </member>
        <member name="M:SourceGrid.ColumnInfoCollection.Clear">
            <summary>
            Remove all the columns
            </summary>
        </member>
        <member name="E:SourceGrid.ColumnInfoCollection.ColumnsAdded">
            <summary>
            Fired when the number of columns change
            </summary>
        </member>
        <member name="E:SourceGrid.ColumnInfoCollection.ColumnsRemoved">
            <summary>
            Fired when some columns are removed
            </summary>
        </member>
        <member name="E:SourceGrid.ColumnInfoCollection.ColumnsRemoving">
            <summary>
            Fired before some columns are removed
            </summary>
        </member>
        <member name="P:SourceGrid.ColumnInfoCollection.Item(System.Int32)">
            <summary>
            Indexer. Returns a ColumnInfo at the specified position
            </summary>
        </member>
        <member name="E:SourceGrid.ColumnInfoCollection.ColumnWidthChanged">
            <summary>
            Fired when the user change the Width property of one of the Column
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GridColumns.Insert(System.Int32)">
            <summary>
            Insert a column at the specified position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid.Grid.GridColumns.InsertRange(System.Int32,System.Int32)">
            <summary>
            Insert the specified number of Columns at the specified position
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="T:SourceGrid.RowInfo">
            <summary>
            Row Information
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfo.#ctor(SourceGrid.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="P:SourceGrid.RowInfo.Height">
            <summary>
            Height of the current row
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.Index">
            <summary>
            Index of the current row
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.Grid">
            <summary>
            Attached Grid
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.Tag">
            <summary>
            A property that the user can use to insert custom informations associated to a specific row
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.AutoSizeMode">
            <summary>
            Flags for autosize and stretch
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfo.Visible">
            <summary>
            Gets or sets if the row is visible.
            Internally set the height to 0 to hide a row.
            </summary>
        </member>
        <member name="T:SourceGrid.RowInfoCollection">
            <summary>
            Collection of RowInfo
            </summary>
        </member>
        <member name="T:SourceGrid.RowsBase">
            <summary>
            Abstract base class for manage rows informations.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.GetHeight(System.Int32)">
            <summary>
            Gets the height of the specified row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowsBase.SetHeight(System.Int32,System.Int32)">
            <summary>
            Sets the height of the specified row.
            </summary>
            <param name="row"></param>
            <param name="height"></param>
        </member>
        <member name="M:SourceGrid.RowsBase.RowsInsideRegion(System.Int32,System.Int32)">
            <summary>
            Gets the rows index inside the specified display area.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.RowsInsideRegion(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the rows index inside the specified display area.
            The list returned is ordered by the index.
            Note that this method returns also invisible rows.
            </summary>
            <param name="y"></param>
            <param name="height"></param>
            <param name="returnsPartial">True to returns also partial rows</param>
        </member>
        <member name="M:SourceGrid.RowsBase.RowAtPoint(System.Int32)">
            <summary>
            Calculate the Row that have the Top value smaller or equal than the point p_Y, or -1 if not found found.
            </summary>
            <param name="y">Y Coordinate to search for a row</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowsBase.MeasureRowHeight(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Measures the current row when drawn with the specified cells.
            </summary>
            <param name="row"></param>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
            <param name="StartCol">Start column to measure</param>
            <param name="EndCol">End column to measure</param>
            <returns>Returns the required height</returns>
        </member>
        <member name="M:SourceGrid.RowsBase.AutoSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Auto size all the rows with the max required height of all cells.
            </summary>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
            <param name="StartCol">Start column to measure</param>
            <param name="EndCol">End column to measure</param>
        </member>
        <member name="M:SourceGrid.RowsBase.StretchToFit">
            <summary>
            stretch the rows height to always fit the available space when the contents of the cell is smaller.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.RowsChanged">
            <summary>
            Fired when the numbers of rows changed.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.GetTop(System.Int32)">
            <summary>
            Gets the row top position.
            The Top is relative to the specified start position.
            Calculate the top using also the FixedRows if present.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.GetBottom(System.Int32)">
            <summary>
            Gets the row bottom position. GetTop + GetHeight.
            </summary>
        </member>
        <member name="M:SourceGrid.RowsBase.ShowRow(System.Int32)">
            <summary>
            Show a row (set the height to default height)
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SourceGrid.RowsBase.HideRow(System.Int32)">
            <summary>
            Hide the specified row (set the height to 0)
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SourceGrid.RowsBase.IsRowVisible(System.Int32)">
            <summary>
            Returns true if the specified row is visible
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.RowsBase.FirstVisibleScrollableRow">
            <summary>
            Returns the first visible scrollable row.
            Return null if there isn't a visible row.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.RowsBase.LastVisibleScrollableRow">
            <summary>
            Returns the last visible scrollable row.
            Return null if there isn't a visible row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.#ctor(SourceGrid.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.IsValidRange(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.IsValidRangeForInsert(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid for insert method
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.InsertRange(System.Int32,SourceGrid.RowInfo[])">
            <summary>
            Insert the specified number of rows at the specified position
            </summary>
            <param name="p_StartIndex"></param>
            <param name="rows"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.Remove(System.Int32)">
            <summary>
            Remove a row at the speicifed position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove the RowInfo at the specified positions
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.Move(System.Int32,System.Int32)">
            <summary>
            Move a row from one position to another position
            </summary>
            <param name="p_CurrentRowPosition"></param>
            <param name="p_NewRowPosition"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Change the position of row 1 with row 2.
            </summary>
            <param name="p_RowIndex1"></param>
            <param name="p_RowIndex2"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.OnRowsAdded(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired when the number of rows change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.OnRowsRemoved(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired when some rows are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.OnRowsRemoving(SourceGrid.IndexRangeEventArgs)">
            <summary>
            Fired before some rows are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.OnRowHeightChanged(SourceGrid.RowInfoEventArgs)">
            <summary>
            Execute the RowHeightChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.AutoSizeView">
            <summary>
            Auto size the rows calculating the required size only on the columns currently visible
            </summary>
        </member>
        <member name="M:SourceGrid.RowInfoCollection.Clear">
            <summary>
            Remove all the columns
            </summary>
        </member>
        <member name="E:SourceGrid.RowInfoCollection.RowsAdded">
            <summary>
            Fired when the number of rows change
            </summary>
        </member>
        <member name="E:SourceGrid.RowInfoCollection.RowsRemoved">
            <summary>
            Fired when some rows are removed
            </summary>
        </member>
        <member name="E:SourceGrid.RowInfoCollection.RowsRemoving">
            <summary>
            Fired before some rows are removed
            </summary>
        </member>
        <member name="P:SourceGrid.RowInfoCollection.Item(System.Int32)">
            <summary>
            Indexer. Returns a RowInfo at the specified position
            </summary>
        </member>
        <member name="E:SourceGrid.RowInfoCollection.RowHeightChanged">
            <summary>
            Fired when the user change the Height property of one of the Row
            </summary>
        </member>
        <member name="M:SourceGrid.Grid.GridRows.Insert(System.Int32)">
            <summary>
            Insert a row at the specified position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid.Grid.GridRows.InsertRange(System.Int32,System.Int32)">
            <summary>
            Insert the specified number of rows at the specified position
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="T:SourceGrid.Exporter.HTML">
            <summary>
            An utility class to export the grid in a html format file.
            </summary>
        </member>
        <member name="F:SourceGrid.Exporter.HTML.m_EmbeddedImagesPath">
            <summary>
            Key:Image, Value:ImageFileName
            </summary>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.#ctor(SourceGrid.Exporter.ExportHTMLMode,System.String,System.String,System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="p_Mode"></param>
            <param name="p_ImageFullPath">The path to write embedded images files</param>
            <param name="p_ImageRelativePath">The path used in the HTML source. If you save the images in the same path of the HTML file you can leave this path empty.</param>
            <param name="p_HtmlStream">The stream to write</param>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ClearEmbeddedImages">
            <summary>
            Clear the list of embedded images. This method don't delete the files only clear the list.
            </summary>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ExportImage(System.Drawing.Image)">
            <summary>
            Save the Image to file and returns the file
            </summary>
            <param name="p_Image"></param>
            <returns>Returns the path where the image is exported valid for the HTML page</returns>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ColorToHTML(System.Drawing.Color)">
            <summary>
            Convert a Color to HTML compatible string
            </summary>
            <param name="p_Color"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ExportHTML_Element_Font(System.Xml.XmlTextWriter,System.String,System.Drawing.Font)">
            <summary>
            Export a font html element with the specified font and text
            </summary>
            <param name="p_Writer"></param>
            <param name="p_DisplayText"></param>
            <param name="p_Font"></param>
        </member>
        <member name="M:SourceGrid.Exporter.HTML.ExportHTMLCell(SourceGrid.CellContext,System.Xml.XmlTextWriter)">
            <summary>
            Export the specified cell to HTML
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
        </member>
        <member name="P:SourceGrid.Exporter.HTML.Mode">
            <summary>
            Export mode
            </summary>
        </member>
        <member name="P:SourceGrid.Exporter.HTML.EmbeddedImagesPath">
            <summary>
            List of images exported during HTML export
            </summary>
        </member>
        <member name="T:SourceGrid.Exporter.ExportHTMLMode">
            <summary>
            Flags for the export html features (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.CheckBox">
            <summary>
            Summary description for VisualModelCheckBox.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.Cell">
            <summary>
            Class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.ViewBase">
            <summary>
            Base abstract class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.IView">
            <summary>
            A interface that represents the visual aspect of a cell. Contains the Draw method and the common properties
            Support a deep cloning.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.IView.GetDrawingFont(SourceGrid.GridVirtual)">
            <summary>
            Get the font of the cell, check if the current font is null and in this case return the grid font
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Views.IView.DrawCell(SourceGrid.CellContext,DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Draw the cell specified
            </summary>
            <param name="cellContext"></param>
            <param name="graphics">Paint arguments</param>
            <param name="rectangle">Rectangle where draw the current cell</param>
        </member>
        <member name="M:SourceGrid.Cells.Views.IView.Measure(SourceGrid.CellContext,System.Drawing.Size)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="cellContext"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.WordWrap">
            <summary>
            Word Wrap.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.TextAlignment">
            <summary>
            Text Alignment.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.Border">
            <summary>
            The normal border of a cell. Usually it is an instance of a DevAge.Drawing.RectangleBorder structure
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.BackColor">
            <summary>
            The BackColor of a cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.IView.ForeColor">
            <summary>
            The ForeColor of a cell
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.ViewBase.DefaultBorder">
            <summary>
            A default RectangleBorder instance with a 1 pixed LightGray border on bottom and right side
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.#ctor(SourceGrid.Cells.Views.ViewBase)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.GetDrawingFont(SourceGrid.GridVirtual)">
            <summary>
            Get the font of the cell, check if the current font is null and in this case return the grid font
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.DrawCell(SourceGrid.CellContext,DevAge.Drawing.GraphicsCache,System.Drawing.RectangleF)">
            <summary>
            Draw the cell specified
            </summary>
            <param name="cellContext"></param>
            <param name="graphics">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle where draw the current cell</param>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.PrepareView(SourceGrid.CellContext)">
            <summary>
            Prepare the current View before drawing. Override this method for customize the specials VisualModel that you need to create. Always calls the base PrepareView.
            </summary>
            <param name="context">Current context. Cell to draw. This property is set before drawing. Only inside the PrepareView you can access this property.</param>
        </member>
        <member name="M:SourceGrid.Cells.Views.ViewBase.Measure(SourceGrid.CellContext,System.Drawing.Size)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="cellContext"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.ImageStretch">
            <summary>
            True to stretch the image to all the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.ImageAlignment">
            <summary>
            Image Alignment
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.Font">
            <summary>
            If null the grid font is used
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.ForeColor">
            <summary>
            ForeColor of the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.WordWrap">
            <summary>
            Word Wrap, default false.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.TrimmingMode">
            <summary>
            TrimmingMode, default Char.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.TextAlignment">
            <summary>
            Text Alignment.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.BackColor">
            <summary>
            Returns the color of the Background. If the Background it isn't an instance of BackgroundSolid then returns DefaultBackColor
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.Border">
            <summary>
            The border of the Cell. Usually it is an instance of the DevAge.Drawing.RectangleBorder structure.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.Padding">
            <summary>
            The padding of the cell. Usually it is 2 pixel on all sides.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.ElementsDrawMode">
            <summary>
            Gets or sets a property that specify how to draw the elements.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.ViewBase.Background">
            <summary>
            Background of the cell. Usually it is an instance of BackgroundSolid
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.Cell.Default">
            <summary>
            Represents a default Model
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.#ctor(SourceGrid.Cells.Views.Cell)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.PrepareVisualElementText(SourceGrid.CellContext)">
            <summary>
            Apply to the VisualElement specified the Image properties of the current View.
            Derived class can call this method to apply the settings to custom VisualElement.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Cell.PrepareVisualElementImage(SourceGrid.CellContext)">
            <summary>
            Apply to the VisualElement specified the Image properties of the current View.
            Derived class can call this method to apply the settings to custom VisualElement.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.Cell.ElementText">
            <summary>
            Gets or sets the IText visual element used to draw the cell text.
            Default is DevAge.Drawing.VisualElements.TextGDI
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.Cell.ElementImage">
            <summary>
            Gets or sets the IImage visual element used to draw the cell image.
            Default is DevAge.Drawing.VisualElements.Image
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.CheckBox.Default">
            <summary>
            Represents a default CheckBox with the CheckBox image align to the Middle Center of the cell. You must use this VisualModel with a Cell of type ICellCheckBox.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.CheckBox.MiddleLeftAlign">
            <summary>
            Represents a CheckBox with the CheckBox image align to the Middle Left of the cell
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.CheckBox.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.CheckBox.#ctor(SourceGrid.Cells.Views.CheckBox)">
            <summary>
            Copy constructor. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.CheckBox.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.CheckBox.CheckBoxAlignment">
            <summary>
            Image Alignment
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Views.CheckBox.ElementCheckBox">
            <summary>
            Gets or sets the visual element used to draw the checkbox. Default is DevAge.Drawing.VisualElements.CheckBoxThemed.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.RowHeader">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.CellVirtual">
            <summary>
            Represents a CellVirtual in a grid.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.#ctor">
            <summary>
            Constructor. Create a CellVirtual using a default NullValueModel. You must provide your custom ValueModel to bind the cell to a value.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.#ctor(System.Type)">
            <summary>
            Constructor. Create a CellVirtual using a default NullValueModel. You must provide your custom ValueModel to bind the cell to a value.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.AddController(SourceGrid.Cells.Controllers.IController)">
            <summary>
            Add the specified controller
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.RemoveController(SourceGrid.Cells.Controllers.IController)">
            <summary>
            Remove the specifed controller
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.FindController(System.Type)">
            <summary>
            Find the specified controller. Returns null if not found.
            </summary>
            <param name="pControllerType"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CellVirtual.Copy">
            <summary>
            Create a shallow copy of the current object. Note that this is not a deep clone, all the reference are the same.
            Use internally MemberwiseClone method.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Model">
            <summary>
            Represents the model of the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.CellVirtual.View">
            <summary>
            Visual properties of this cell and other cell. You can share the VisualProperties between many cell to optimize memory size.
            Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Controller">
            <summary>
            Controller of the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.CellVirtual.Editor">
            <summary>
            Editor of this cell and others cells. If null no edit is supported. 
             You can share the same model between many cells to optimize memory size. Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.RowHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.RowHeader.ResizeEnabled">
            <summary>
            Gets or sets if enable the resize of the height, using a Resizable controller. Default is true.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.RowHeader">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Cell">
            <summary>
            Represents a Cell in a grid, with Cell.Value support and row/col span. Support also ToolTipText, ContextMenu and Cursor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.ICell">
            <summary>
            Represents a Cell to use with Grid control.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ICell.BindToGrid(SourceGrid.Grid,SourceGrid.Position)">
            <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
            <param name="p_grid"></param>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid.Cells.ICell.UnBindToGrid">
            <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.DisplayText">
            <summary>
            Gets the string representation of the Cell.Value property (default Value.ToString())
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Value">
            <summary>
            Gets or sets the value of the cell 
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Tag">
            <summary>
            Gets or sets additional info for this cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.ToolTipText">
            <summary>
            Gets or sets the ToolTipText
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Image">
            <summary>
            Gets or set the image of the cell.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Grid">
            <summary>
            The Grid object
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Column">
            <summary>
            Gets the column of the specified cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Row">
            <summary>
            Gets the row of the specified cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.Range">
            <summary>
            Gets the range of the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.ColumnSpan">
            <summary>
            ColSpan for merge operation, calculated using the current range.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ICell.RowSpan">
            <summary>
            RowSpan for merge operation, calculated using the current range.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Cell.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
            <param name="pType"></param>
        </member>
        <member name="M:SourceGrid.Cells.Cell.#ctor(System.Object,SourceGrid.Cells.Editors.EditorBase)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
            <param name="pEditor"></param>
        </member>
        <member name="M:SourceGrid.Cells.Cell.BindToGrid(SourceGrid.Grid,SourceGrid.Position)">
            <summary>
            Link the cell at the specified grid.
            For internal use only.
            </summary>
            <param name="p_grid"></param>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid.Cells.Cell.UnBindToGrid">
            <summary>
            Remove the link of the cell from the grid.
            For internal use only.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Cell.m_Tag">
            <summary>
            Object to put additional info for this cell
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Cell.ToString">
            <summary>
            ToString method
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Grid">
            <summary>
            The Grid object
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Column">
            <summary>
            Gets the column of the specified cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Row">
            <summary>
            Gets the row of the specified cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Range">
            <summary>
            Gets the range of the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.DisplayText">
            <summary>
            The string representation of the Cell.Value property (default Value.ToString())
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Value">
            <summary>
            Value of the cell 
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Tag">
            <summary>
            Object to put additional info for this cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.ColumnSpan">
            <summary>
            ColSpan for merge operation
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.RowSpan">
            <summary>
            RowSpan for merge operation
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.ToolTipText">
            <summary>
            Gets or sets the tool tip text of the cell. Internally use the Models.ToolTip class.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Cell.Image">
            <summary>
            Gets or sets the Image associeted with the Cell. Internally use a Models.Image class.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RowHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.RowHeader.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
        </member>
        <member name="P:SourceGrid.Cells.RowHeader.ResizeEnabled">
            <summary>
            Gets or sets if enable the resize of the height, using a Resizable controller. Default is true.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.Image">
            <summary>
            A Cell with an Image. Write and read byte[] values.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.Image.#ctor">
            <summary>
            Constructor using a ValueImage model to read he image directly from the value of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Image">
            <summary>
            A Cell with an Image. Write and read byte[] values.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Image.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Image.#ctor(System.Object)">
            <summary>
            Constructor using a ValueImage model to read he image directly from the value of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.ImagePicker">
            <summary>
             A model that use a TextBoxButton for Image editing, allowing to select a source image file. Returns null as DisplayString. Write and read byte[] values.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ImagePicker.#ctor">
            <summary>
            Construct an Editor of type ImagePicker.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ImagePicker.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ImagePicker.ValueToDisplayString(System.Object)">
            <summary>
            Used to returns the display string for a given value. In this case return null.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.ImagePicker.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.StandardBehavior">
            <summary>
            Common behavior of the cell. 
            This controller can be shared between multiple cells and is usually used as the default Grid.Controller. Removing this controller can cause unexpected behaviors.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.ControllerBase">
            <summary>
            Implements all the method of the controller interface without any implementation
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.IController">
            <summary>
            Represents a behavior of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseDown(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseUp(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseMove(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseEnter(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnMouseLeave(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyUp(SourceGrid.CellContext,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyDown(SourceGrid.CellContext,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnKeyPress(SourceGrid.CellContext,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDoubleClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusLeaving(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fired before the cell leave the focus, you can put the e.Cancel = true to cancel the leave operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusLeft(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the cell has left the focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusEntering(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fired when the focus is entering in the specified cell. You can put the e.Cancel = true to cancel the focus operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnFocusEntered(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the focus enter in the specified cell.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnValueChanging(SourceGrid.CellContext,DevAge.ComponentModel.ValueEventArgs)">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnEditStarting(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fired when the StartEdit is called and before the cell start the edit operation. You can set the Cancel = true to stop editing.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnEditStarted(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the StartEdit is sucesfully called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.CanReceiveFocus(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Returns true if the current cell can receive the focus. If only one behavior return false the return value is false.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDragDrop(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDragEnter(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDragLeave(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnDragOver(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.IController.OnGiveFeedback(SourceGrid.CellContext,System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerBase.OnValueChanging(SourceGrid.CellContext,DevAge.ComponentModel.ValueEventArgs)">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerBase.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.StandardBehavior.Default">
            <summary>
            The default behavior of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnKeyDown(SourceGrid.CellContext,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnKeyPress(SourceGrid.CellContext,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnDoubleClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnFocusEntered(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnFocusLeft(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the SetValue method is called.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.StandardBehavior.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when editing is ended
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.CellControl">
            <summary>
            The CellControl class is used to create a cell with a Windows Forms Control inside.
            The CellControl class requires a new Windows Forms control for each cell. Unfortunately Winwods Forms control requires a lot of system resources and with many cells this can cause system fault or out of memory conditions.
            Basically I suggest to use CellControl with no more than 50 cells and only if necessary, usually it is better to use standard cells.
            Another problem with the CellControl class is that it is not integrated well with the rest of the grid (control borders, cell navigation, ...)
            Finally a cell of type CellControl cannot be moved, for example you cannot use sort, move the columns, ... when using a CellControl.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.CellControl.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructor.
            </summary>
            <param name="control">Control to insert inside the grid</param>
        </member>
        <member name="M:SourceGrid.Cells.CellControl.#ctor(System.Windows.Forms.Control,SourceGrid.LinkedControlScrollMode,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="control">Control to insert inside the grid</param>
            <param name="scrollMode"></param>
            <param name="useCellBorder"></param>
        </member>
        <member name="P:SourceGrid.Cells.CellControl.Control">
            <summary>
            Gets the control associated with this cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.DateTimePicker">
            <summary>
            Create an Editor that use a DateTimePicker as control for date editing.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.DateTimePicker.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.DateTimePicker.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.Resizable">
            <summary>
            Implement the mouse resize features of a cell. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeBoth">
            <summary>
            Resize both width nd height behavior
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeWidth">
            <summary>
            Resize width behavior
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Resizable.ResizeHeight">
            <summary>
            Resize height behavior
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Resizable.LogicalBorder">
            <summary>
            Border used to calculate the region where the resize is enabled.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.Resizable.#ctor(SourceGrid.CellResizeMode)">
            <summary>
            Constructor
            </summary>
            <param name="p_Mode"></param>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.Resizable.ResizeMode">
            <summary>
            Resize mode of the cell
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.Resizable.IsWidthResizing">
            <summary>
            Indicates if the behavior is currently resizing a cell width
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.Resizable.IsHeightResizing">
            <summary>
            Indicates if the behavior is currently resizing a cell height
            </summary>
        </member>
        <member name="T:SourceGrid.CellCollection">
            <summary>
            A collection of elements of type Cells.ICellVirtual
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.#ctor">
            <summary>
            Initializes a new empty instance of the CellBaseCollection class.
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.#ctor(SourceGrid.Cells.ICellVirtual[])">
            <summary>
            Initializes a new instance of the CellBaseCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.#ctor(SourceGrid.CellCollection)">
            <summary>
            Initializes a new instance of the CellBaseCollection class, containing elements
            copied from another instance of CellBaseCollection
            </summary>
            <param name="items">
            The CellBaseCollection whose elements are to be added to the new CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.AddRange(SourceGrid.Cells.ICellVirtual[])">
            <summary>
            Adds the elements of an array to the end of this CellBaseCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.AddRange(SourceGrid.CellCollection)">
            <summary>
            Adds the elements of another CellBaseCollection to the end of this CellBaseCollection.
            </summary>
            <param name="items">
            The CellBaseCollection whose elements are to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.Add(SourceGrid.Cells.ICellVirtual)">
            <summary>
            Adds an instance of type Cells.ICellVirtual to the end of this CellBaseCollection.
            </summary>
            <param name="value">
            The Cells.ICellVirtual to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.Contains(SourceGrid.Cells.ICellVirtual)">
            <summary>
            Determines whether a specfic Cells.ICellVirtual value is in this CellBaseCollection.
            </summary>
            <param name="value">
            The Cells.ICellVirtual value to locate in this CellBaseCollection.
            </param>
            <returns>
            true if value is found in this CellBaseCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid.CellCollection.IndexOf(SourceGrid.Cells.ICellVirtual)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this CellBaseCollection
            </summary>
            <param name="value">
            The Cells.ICellVirtual value to locate in the CellBaseCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid.CellCollection.Insert(System.Int32,SourceGrid.Cells.ICellVirtual)">
            <summary>
            Inserts an element into the CellBaseCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Cells.ICellVirtual is to be inserted.
            </param>
            <param name="value">
            The Cells.ICellVirtual to insert.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.Remove(SourceGrid.Cells.ICellVirtual)">
            <summary>
            Removes the first occurrence of a specific Cells.ICellVirtual from this CellBaseCollection.
            </summary>
            <param name="value">
            The Cells.ICellVirtual value to remove from this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid.CellCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this CellBaseCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:SourceGrid.CellCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Cells.ICellVirtual at the given index in this CellBaseCollection.
            </summary>
        </member>
        <member name="T:SourceGrid.CellCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by CellBaseCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:SourceGrid.CellCollection.Enumerator.#ctor(SourceGrid.CellCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:SourceGrid.CellCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid.CellCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid.CellCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.Button">
            <summary>
            Summary description for a 3D themed Button.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.Button.Default">
            <summary>
            Represents a Button with the ability to draw an Image. Disable also the selection border using the OwnerDrawSelectionBorder = true.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Button.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Button.#ctor(SourceGrid.Cells.Views.Button)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.Button.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Editors.ComboBox">
            <summary>
            Editor for a ComboBox (using DevAgeComboBox control)
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.#ctor(System.Type,System.Collections.ICollection,System.Boolean)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
            <param name="p_StandardValues"></param>
            <param name="p_StandardValueExclusive">True to not allow custom value, only the values specified in the standardvalues collection are allowed.</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.ComboBox.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.ComboBox.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.MouseCursor">
            <summary>
            Allow to customize the cursor of a cell. The cell must implement ICellCursor. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseCursor.ApplyCursor(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Change the cursor with the cursor of the cell
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseCursor.ResetCursor(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Reset the original cursor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.CustomEvents">
            <summary>
            In this Controller are defined all the events fired by the Controller. Each event has a sender object of type CellContext that you can use to read the cell informations.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CustomEvents.OnValueChanging(SourceGrid.CellContext,DevAge.ComponentModel.ValueEventArgs)">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CustomEvents.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid.Cells.Controllers.CustomEvents.ValueChanging">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
        </member>
        <member name="E:SourceGrid.Cells.Controllers.CustomEvents.ValueChanged">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.Button">
            <summary>
            A cell that rappresent a button 
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.Button.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Button">
            <summary>
            A cell that rappresent a button 
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Button.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="T:SourceGrid.Selection.FreeSelection">
            <summary>
            A selection class that support free selection of cells (ranges)
            </summary>
        </member>
        <member name="M:SourceGrid.Selection.FreeSelection.IsEmpty">
            <summary>
            Returns true if the selection is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.FreeSelection.GetSelectionRegion">
            <summary>
            Returns the selected region.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Selection.FreeSelection.IntersectsWith(SourceGrid.Range)">
            <summary>
            Returns true if the specified selection intersect with the range
            </summary>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Exporter.Image">
            <summary>
            An utility class to export a grid to a csv delimited format file.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.Link">
            <summary>
            Class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.Link.Default">
            <summary>
            Represents a model with a link style font and forecolor.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Link.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Link.#ctor(SourceGrid.Cells.Views.Link)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.Link.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.Cells.Views.ComboBox.Default">
            <summary>
            Represents a default CheckBox with the CheckBox image align to the Middle Center of the cell. You must use this VisualModel with a Cell of type ICellCheckBox.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ComboBox.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ComboBox.#ctor(SourceGrid.Cells.Views.ComboBox)">
            <summary>
            Copy constructor. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.ComboBox.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.ComboBox.ElementDropDown">
            <summary>
            Gets or sets the visual element used to draw the checkbox. Default is DevAge.Drawing.VisualElements.CheckBoxThemed.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.ICheckBox">
            <summary>
            Interface for informations about a cechkbox
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.IModel">
            <summary>
            A generic model interface
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ICheckBox.GetCheckBoxStatus(SourceGrid.CellContext)">
            <summary>
            Get the status of the checkbox at the current position
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.ICheckBox.SetCheckedValue(SourceGrid.CellContext,System.Nullable{System.Boolean})">
            <summary>
            Set the checked value
            </summary>
            <param name="cellContext"></param>
            <param name="pChecked">True, False or Null</param>
        </member>
        <member name="T:SourceGrid.Cells.Models.CheckBoxStatus">
            <summary>
            Status of the CheckBox
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.CheckBoxStatus.#ctor(System.Boolean,System.Nullable{System.Boolean},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="checkEnable"></param>
            <param name="bChecked"></param>
            <param name="caption"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.CheckBoxStatus.#ctor(System.Boolean,DevAge.Drawing.CheckBoxState,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="checkEnable"></param>
            <param name="checkState"></param>
            <param name="caption"></param>
        </member>
        <member name="F:SourceGrid.Cells.Models.CheckBoxStatus.CheckEnable">
            <summary>
            Enable or disable the checkbox
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Models.CheckBoxStatus.Caption">
            <summary>
            Caption of the CheckBox
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Models.CheckBoxStatus.CheckState">
            <summary>
            Gets or sets the state of the check box.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Models.CheckBoxStatus.Checked">
            <summary>
            Gets or set Checked status. Return true for Checked, false for Uncheck and null for Undefined
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.CheckBox">
            <summary>
            Summary description for BehaviorModelCheckBox. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.CheckBox.Default">
            <summary>
            Default behavior checkbox
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CheckBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CheckBox.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="p_bAutoChangeValueOfSelectedCells">Indicates if this cells when checked or uncheck must change also the value of the selected cells of type CellCheckBox.</param>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.CheckBox.mLastButton">
            <summary>
            I mantain the last mouse button pressed here to simulate exactly the behavior of the standard system CheckBox.
            
            Here are the events executed on a system checkbox:
            
            [status checked = false]
            MouseDown [status checked = false]
            CheckedChanged [status checked = true]
            Click [status checked = true]
            MouseUp [status checked = true]
            
            Consider that I can use this member varialbes because also if you have multiple grid or multiple threads there is only one mouse that can fire the events.
            Consider also that I cannot use the Click event because in that event I don't have informations about the button pressed.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CheckBox.UIChangeChecked(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Toggle the value of the current cell and if AutoChangeValueOfSelectedCells is true of all the selected cells.
            Simulate an edit operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.CheckBox.AutoChangeValueOfSelectedCells">
            <summary>
            Indicates if this cells when checked or uncheck must change also the value of the selected cells of type CellCheckBox. Default is false
            </summary>
        </member>
        <member name="T:SourceGrid.PositionCollection">
            <summary>
            A collection of elements of type Position
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.ModelContainer">
            <summary>
            A container for the model classes. THe only required model is the Value model, that you can assign using the ValueModel property.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ModelContainer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ModelContainer.FindModel(System.Type)">
            <summary>
            Returns null if not exist
            </summary>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Models.ModelContainer.ModelList">
            <summary>
            A collection of elements of type IModel
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TimePicker">
            <summary>
            Create an Editor that use a DateTimePicker as control for time editing.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TimePicker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TimePicker.#ctor(System.String,System.String[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TimePicker.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TimePicker.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBoxNumeric">
            <summary>
            An editor that use a TextBoxTypedNumeric for editing support. You can customize the Control.NumericCharStyle property to enable char validation.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBox">
            <summary>
            An editor that use a TextBoxTyped for editing support.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.OnStartingEdit(SourceGrid.CellContext,System.Windows.Forms.Control)">
            <summary>
            This method is called just before the edit start. You can use this method to customize the editor with the cell informations.
            </summary>
            <param name="cellContext"></param>
            <param name="editorControl"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBox.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TextBox.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxNumeric.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxNumeric.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.TextBoxNumeric.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.BindProperty">
            <summary>
            Summary description for BindProperty.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.BindProperty.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="p_Property">Property of the object that you want to lint to the cell. When the value of the cell changed this behavior call automatically this property.</param>
            <param name="p_LinkObject">Instance of the object to link</param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.BindProperty.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            OnValueChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.BindProperty.BindValueAtProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Bind the cell's value with the property p_Property of the object p_LinkObject
            when the cell's value change also the property change
            </summary>
            <param name="p_Property">linked property</param>
            <param name="p_LinkObject">Can be null to call static property</param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.BindProperty.UnBindValueAtProperty">
            <summary>
            UnBind the cell with the property
            </summary>
        </member>
        <member name="T:SourceGrid.RowsSimpleBase">
            <summary>
            This class implements a RowsBase class using always the same Height for all rows. Using this class you must only implement the Count method.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.Factory.Create(System.Type)">
            <summary>
            Construct an EditorBase for the specified type. You can set the value returned in the Editor property.
            If the Type support a UITypeEditor returns a EditorUITypeEditor else if the type has a StandardValues list return a EditorComboBox else if the type support string conversion returns a EditorTextBox otherwise returns null.
            </summary>
            <param name="p_Type">Type to edit</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.Factory.Create(System.Type,System.Object,System.Boolean,System.Collections.ICollection,System.Boolean,System.ComponentModel.TypeConverter,System.Drawing.Design.UITypeEditor)">
            <summary>
            Construct a CellEditor for the specified type
            </summary>
            <param name="p_Type">Cell Type</param>
            <param name="p_DefaultValue">Default value of the editor</param>
            <param name="p_bAllowNull">Allow null</param>
            <param name="p_StandardValues">List of available values or null if there is no available values list</param>
            <param name="p_bStandardValueExclusive">Indicates if the p_StandardValue are the unique values supported</param>
            <param name="p_TypeConverter">Type converter used for conversion for the specified type</param>
            <param name="p_UITypeEditor">UITypeEditor if null must be populated the TypeConverter</param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.ColumnsSimpleBase">
            <summary>
            This class implements a RowsBase class using always the same Height for all rows. Using this class you must only implement the Count method.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.ColumnHeader">
            <summary>
            Summary description for a 3D Header.
            This is a standard header without theme support. Use the ColumnHeaderThemed for theme support.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.Header">
            <summary>
            Summary description for a 3D Header.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.Header.Default">
            <summary>
            Represents a default Header, with a 3D border and a LightGray BackColor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Header.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.Header.#ctor(SourceGrid.Cells.Views.Header)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.Header.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.Cells.Views.ColumnHeader.Default">
            <summary>
            Represents a Column Header with the ability to draw an Image in the right to indicates the sort operation. You must use this model with a cell of type ICellSortableHeader.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ColumnHeader.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.ColumnHeader.#ctor(SourceGrid.Cells.Views.ColumnHeader)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.ColumnHeader.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.ColumnHeader.ElementSort">
            <summary>
            Gets or sets the visual element used to draw the sort indicator. Default is DevAge.Drawing.VisualElements.SortIndicator
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.Link">
            <summary>
            A cell that contains a HTML style link. Use the click event to execute the link
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.Link.#ctor">
            <summary>
            Constructor, using VisualModels.Common.LinkStyle and BehaviorModels.Cursor.Default
            </summary>
            <param name="valueModel"></param>
        </member>
        <member name="T:SourceGrid.Cells.Link">
            <summary>
            A cell that contains a HTML style link. Use the click event to execute the link
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Link.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Link.#ctor(System.Object)">
            <summary>
            Constructor using VisualModels.Common.LinkStyle and BehaviorModels.Cursor.Default
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="T:SourceGrid.Cells.Editors.TextBoxCurrency">
            <summary>
            An editor to support Currency data type
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.TextBoxCurrency.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.FindController(System.Type)">
            <summary>
            Returns null if not exist
            </summary>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnValueChanging(SourceGrid.CellContext,DevAge.ComponentModel.ValueEventArgs)">
            <summary>
            Fired before the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired after the value of the cell is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditStarting(SourceGrid.CellContext,System.ComponentModel.CancelEventArgs)">
            <summary>
            Fired when the StartEdit is called and before the cell start the edit operation. You can set the Cancel = true to stop editing.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditStarted(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the StartEdit is sucesfully called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ControllerContainer.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.ControllerContainer.ControllerList">
            <summary>
            A collection of elements of type IController. Only one instance of the same controller is allowed.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.CellEventDispatcher">
            <summary>
            This controller dispatch each event to the specified cell.
            This controller can be shared between multiple cells and is usually used as the default Grid.Controller. Removing this controller can cause unexpected behaviors.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.CellEventDispatcher.Default">
            <summary>
            The default behavior of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnKeyDown(SourceGrid.CellContext,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnKeyPress(SourceGrid.CellContext,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnDoubleClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnClick(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnFocusEntered(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnFocusLeft(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnValueChanged(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when the SetValue method is called.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnEditEnded(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Fired when editing is ended
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnDragDrop(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnDragEnter(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnDragLeave(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnDragOver(SourceGrid.CellContext,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.CellEventDispatcher.OnGiveFeedback(SourceGrid.CellContext,System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.ColumnHeader">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.ColumnHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.ColumnHeader.ResizeEnabled">
            <summary>
            Gets or sets if enable the resize of the width of the column. This property internally use the Controllers.Resizable.ResizeWidth.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Virtual.ColumnHeader.AutomaticSortEnabled">
            <summary>
            Gets or sets if enable the automatic sort features of the column. This property internally use the Controllers.SortableHeader.Default.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.ColumnHeader">
            <summary>
            A cell that rappresent a header of a table. 
            View: Views.ColumnHeader.Default 
            Model: Models.SortableHeader 
            Controllers: Controllers.Unselectable.Default, Controllers.MouseInvalidate.Default, Controllers.Resizable.ResizeWidth, Controllers.SortableHeader.Default 
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ColumnHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.ColumnHeader.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.ColumnHeader.Sort(System.Boolean)">
            <summary>
            Sort the column
            </summary>
            <param name="ascending"></param>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.ResizeEnabled">
            <summary>
            Gets or sets if enable the resize of the width of the column. This property internally use the Controllers.Resizable.ResizeWidth.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.AutomaticSortEnabled">
            <summary>
            Gets or sets if enable the automatic sort features of the column. This property internally use the Controllers.SortableHeader.Default.
            If you want to use a custom sort you can add a customized Controller or a customized instance of Controllers.SortableHeader.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.SortableHeaderModel">
            <summary>
            Gets the used SortableHeader model.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.SortStatus">
            <summary>
            Status of the sort.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.SortComparer">
            <summary>
            Comparer used.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.ColumnHeader.SortStyle">
            <summary>
            Sort style.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.RowHeader">
            <summary>
            Summary description for a 3D themed Header.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Views.RowHeader.Default">
            <summary>
            Represents a Column Header with the ability to draw an Image in the right to indicates the sort operation. You must use this model with a cell of type ICellSortableHeader.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.RowHeader.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.RowHeader.#ctor(SourceGrid.Cells.Views.RowHeader)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.RowHeader.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Models.ISortableHeader">
            <summary>
            Summary description for ICellSortableHeader.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ISortableHeader.GetSortStatus(SourceGrid.CellContext)">
            <summary>
            Returns the current sort status
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.ISortableHeader.SetSortMode(SourceGrid.CellContext,DevAge.Drawing.HeaderSortStyle)">
            <summary>
            Set the current sort mode
            </summary>
            <param name="cellContext"></param>
            <param name="pStyle"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.SortStatus.#ctor(DevAge.Drawing.HeaderSortStyle)">
            <summary>
            Constructor
            </summary>
            <param name="p_Style">Status of current sort.</param>
        </member>
        <member name="M:SourceGrid.Cells.Models.SortStatus.#ctor(DevAge.Drawing.HeaderSortStyle,System.Collections.IComparer)">
            <summary>
            Constructor
            </summary>
            <param name="p_Style">Status of current sort.</param>
            <param name="p_Comparer">Comparer used to sort the column. The comparer will take 2 Cell. If null the default ValueCellComparer is used.</param>
        </member>
        <member name="T:SourceGrid.Cells.Models.IImage">
            <summary>
            Interface for informations about an image.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IImage.GetImage(SourceGrid.CellContext)">
            <summary>
            Get the image of the specified cell. 
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.Button">
            <summary>
            Button controller is used to executed a specific action when the user click on a cell or when the user press the Enter or Space key (using the OnKeyDown event).
            Is normally used with the Link or Button Cell.
            Override the OnExecuted to add your code or use the Executed event.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.Button.mLastButton">
            <summary>
            I mantain the last mouse button pressed here to simulate exactly the behavior of the standard system button.
            
            Here are the events executed on a system button:
            
            [status checked = false]
            MouseDown [status checked = false]
            CheckedChanged [status checked = true]
            Click [status checked = true]
            MouseUp [status checked = true]
            
            Consider that I can use this member varialbes because also if you have multiple grid or multiple threads there is only one mouse that can fire the events.
            Consider also that I cannot use the Click event because in that event I don't have informations about the button pressed.
            </summary>
        </member>
        <member name="T:SourceGrid.Range">
            <summary>
            Represents a range of cells. Once created cannot be modified. This Range has always Start in the Top-Left, and End in the Bottom-Right (see Normalize method).
            </summary>
        </member>
        <member name="M:SourceGrid.Range.#ctor(SourceGrid.Position,SourceGrid.Position)">
            <summary>
            Constructor
            </summary>
            <param name="p_Start"></param>
            <param name="p_End"></param>
        </member>
        <member name="M:SourceGrid.Range.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="p_StartRow"></param>
            <param name="p_StartCol"></param>
            <param name="p_EndRow"></param>
            <param name="p_EndCol"></param>
        </member>
        <member name="M:SourceGrid.Range.MoveTo(SourceGrid.Position)">
            <summary>
            Move the current range to the specified position, leaving the current ColumnsCount and RowsCount
            </summary>
            <param name="p_StartPosition"></param>
        </member>
        <member name="M:SourceGrid.Range.#ctor(SourceGrid.Position)">
            <summary>
            Construct a Range of a single cell
            </summary>
            <param name="p_SinglePosition"></param>
        </member>
        <member name="F:SourceGrid.Range.Empty">
            <summary>
            Represents an empty range
            </summary>
        </member>
        <member name="M:SourceGrid.Range.Normalize">
            <summary>
            Check and fix the range to always have Start smaller than End
            </summary>
        </member>
        <member name="M:SourceGrid.Range.ContainsRow(System.Int32)">
            <summary>
            Returns true if the specified row is present in the current range.
            </summary>
            <param name="p_Row"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.ContainsColumn(System.Int32)">
            <summary>
            Returns true if the specified column is present in the current range.
            </summary>
            <param name="p_Col"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Contains(SourceGrid.Position)">
            <summary>
            Returns true if the specified cell position is present in the current range.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Contains(SourceGrid.Range)">
            <summary>
            Returns true if the specified range is present in the current range.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.IsEmpty">
            <summary>
            Determines if the current range is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.op_Equality(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.op_Inequality(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Equals(SourceGrid.Range)">
            <summary>
            
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.GetCellsPositions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Union(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns a range with the smaller Start and the bigger End. The Union of the 2 Range. If one of the range is empty then the return is the other range.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.GetBounds(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns a range with the smaller Start and the bigger End. The Union of the 2 Range. If one of the range is empty then the return is the other range.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Intersect(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns the intersection between the 2 Range. If one of the range is empty then the return is empty.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Intersect(SourceGrid.Range)">
            <summary>
            Returns the intersection between the 2 Range. If one of the range is empty then the return is empty.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.IntersectsWith(SourceGrid.Range,SourceGrid.Range)">
            <summary>
            Returns true if the specified range intersects (one or more cells) with the current range.
            If one of the range is empty then the return is false.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.IntersectsWith(SourceGrid.Range)">
            <summary>
            Returns true if the specified range intersects (one or more cells) with the current range.
            If one of the range is empty then the return is false.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Range.Exclude(SourceGrid.Range)">
            <summary>
            Return all the cells that don't intersect with the specified cells. (Remove the specified cells from the current cells ad returns the remaining cells)
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Range.ColumnsCount">
            <summary>
            Sets or Gets the columns count (End.Column-Start.Column)
            </summary>
        </member>
        <member name="P:SourceGrid.Range.RowsCount">
            <summary>
            Sets or Gets the rows count (End.Row-Start.Row)
            </summary>
        </member>
        <member name="T:SourceGrid.IRangeLoader">
            <summary>
            Interface that rappresent a range of the grid. (RangeFullGridNoFixedRows, RangeFullGridNoFixedCols, RangeFixedRows, RangeFixedCols, Range)
            This class is used to calculate a real Range structure at runtime.
            </summary>
        </member>
        <member name="M:SourceGrid.IRangeLoader.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Rectangle that contains the range.
            </summary>
        </member>
        <member name="T:SourceGrid.RangeFullGrid">
            <summary>
            Represents a range that contains all the grid
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGrid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGrid.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeFullGridNoFixedRows">
            <summary>
            Represents a range that contains all the grid with no fixed rows
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGridNoFixedRows.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGridNoFixedRows.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeFullGridNoFixedCols">
            <summary>
            Represents a range that contains all the grid with no fixed cols
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGridNoFixedCols.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFullGridNoFixedCols.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeFixedRows">
            <summary>
            Represents a range that contains only fixed rows
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFixedRows.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFixedRows.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeFixedCols">
            <summary>
            Represents a range that contains only fixed cols
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFixedCols.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeFixedCols.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.RangeLoader">
            <summary>
            Range custom
            </summary>
        </member>
        <member name="M:SourceGrid.RangeLoader.#ctor(SourceGrid.Range)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.RangeLoader.GetRange(SourceGrid.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.RangeLoader.Range">
            <summary>
            Gets or sets the Range loaded in the class.
            </summary>
        </member>
        <member name="T:SourceGrid.GridSelectionMode">
            <summary>
            Selection Mode
            </summary>
        </member>
        <member name="T:SourceGrid.ContextMenuStyle">
            <summary>
            ContextMenuStyle (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid.EditableMode">
            <summary>
            EditableMode Cell mode (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.None">
            <summary>
            No edit support
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.F2Key">
            <summary>
            Edit the cell with F2 key ( 1 )
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.DoubleClick">
            <summary>
            Edit the cell with a double click (2)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.SingleClick">
            <summary>
            Edit a cell with a single Key (4)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.AnyKey">
            <summary>
            Edit the cell pressing any keys (8 + F2Key)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.Focus">
            <summary>
            Edit the cell when it receive the focus (16)
            </summary>
        </member>
        <member name="F:SourceGrid.EditableMode.Default">
            <summary>
            DoubleClick + F2Key
            </summary>
        </member>
        <member name="T:SourceGrid.CellResizeMode">
            <summary>
            Type of resize of the cells (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid.GridSpecialKeys">
            <summary>
            Special keys that the grid can handle. You can change this enum to block or allow some special keys function. (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.None">
            <summary>
            No keys
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Arrows">
            <summary>
            Arrows keys, for moving focus cell operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Tab">
            <summary>
            Tab and Shift+Tab keys, for moving focus cell operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.PageDownUp">
            <summary>
            PageDown and PageUp keys, for page operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Enter">
            <summary>
            Enter key, for apply editing operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Escape">
            <summary>
            Escape key, for cancel editing operation
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Control">
            <summary>
            Control key, for selection operations. Enables the selection of non adjacent cells
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Shift">
            <summary>
            Shift key, for selection operations. Enables the selection of the range from the focused cell to the selected cells.
            </summary>
        </member>
        <member name="F:SourceGrid.GridSpecialKeys.Default">
            <summary>
            Default: Arrows|Tab|PageDownUp|Enter|Escape|Control|Shift
            </summary>
        </member>
        <member name="T:SourceGrid.CellPositionType">
            <summary>
            Position type of the cell. Look at the .vsd diagram for details.
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.Empty">
            <summary>
            Empty Cell
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.FixedTopLeft">
            <summary>
            Fixed Top+Left Cell
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.FixedTop">
            <summary>
            Fixed Top Cell
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.FixedLeft">
            <summary>
            Fixed Left cell
            </summary>
        </member>
        <member name="F:SourceGrid.CellPositionType.Scrollable">
            <summary>
            Scrollable Cell
            </summary>
        </member>
        <member name="T:SourceGrid.SelectionChangeEventType">
            <summary>
            SelectionChangeEventType
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionChangeEventType.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionChangeEventType.Remove">
            <summary>
            Remove
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionChangeEventType.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="T:SourceGrid.FocusStyle">
            <summary>
            FocusStyle (Flags). Used to customize the style of the focus.
            </summary>
        </member>
        <member name="F:SourceGrid.FocusStyle.RemoveFocusCellOnLeave">
            <summary>
            Remove the focus cell when the grid lost the focus
            </summary>
        </member>
        <member name="F:SourceGrid.FocusStyle.RemoveSelectionOnLeave">
            <summary>
            Remove the selection when the grid lost the focus
            </summary>
        </member>
        <member name="F:SourceGrid.FocusStyle.FocusFirstCellOnEnter">
            <summary>
            Set the focus on the first cell when the grid receive the focus and there isnt' an active cell. Use the FocusFirstCell method.
            </summary>
        </member>
        <member name="F:SourceGrid.FocusStyle.Default">
            <summary>
            The default value for this flags: FocusStyle.FocusFirstCellOnEnter | FocusStyle.RemoveFocusCellOnLeave
            </summary>
        </member>
        <member name="T:SourceGrid.AutoSizeMode">
            <summary>
            AutoSizeMode (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.EnableAutoSize">
            <summary>
            Enable the AutoSize
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.EnableStretch">
            <summary>
            Enable Stretch operation
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.MinimumSize">
            <summary>
            If this flag is selected the Measure function returns always the minimum column/row size and don't calculate the real required size. This flag can be used to don't consider the content of a column/row
            </summary>
        </member>
        <member name="F:SourceGrid.AutoSizeMode.Default">
            <summary>
            Default: EnableAutoSize, EnableStretch
            </summary>
        </member>
        <member name="T:SourceGrid.SelectionBorderMode">
            <summary>
            SelectionBorderMode. Used with Grid.Selection.BorderMode property
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.None">
            <summary>
            Don't draw a border around each selection range
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.FocusRange">
            <summary>
            Draw a border around the range that contains the focus.
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.FocusCell">
            <summary>
            Draw a border around the focusl cell
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.UniqueRange">
            <summary>
            Draw a border around the selection range only is there is only one range selected
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionBorderMode.Auto">
            <summary>
            Like the UniqueRange enum but when there is more then one range set the range only on the FocusCell
            </summary>
        </member>
        <member name="T:SourceGrid.SelectionMaskStyle">
            <summary>
            SelectionmaskStyle, used to customize the visual style of the selection mask. (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionMaskStyle.None">
            <summary>
            None. No special flags
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionMaskStyle.DrawOnlyInitializedCells">
            <summary>
            Used to draw only initialized cells. If you have uninitialized cell (you don't create a cell for a specific position: grid[0,0] = null;) the selection mask is not drawed on this cell. Consider that with this flags the drawing method is more complex and slow.If you use this flag the border can only be set to FocusCell or None.
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionMaskStyle.DrawSeletionOverCells">
            <summary>
            Used to draw the selection over the the cells, usually used with a transparent backcolor drawed over the normal cell. If not set, each cells (View) draw the selection or focus backcolor inside the normal drawing code.
            </summary>
        </member>
        <member name="F:SourceGrid.SelectionMaskStyle.Default">
            <summary>
            Default value: None
            </summary>
        </member>
        <member name="T:SourceGrid.CutMode">
            <summary>
            Enum used to specify the cut operation style. Used with the RangeData class.
            </summary>
        </member>
        <member name="F:SourceGrid.CutMode.None">
            <summary>
            Cut disabled.
            </summary>
        </member>
        <member name="F:SourceGrid.CutMode.CutOnPaste">
            <summary>
            Cut enabled, the data are removed from the source only when pasting it on the destination. Used usually with the drag and drop operations.
            </summary>
        </member>
        <member name="F:SourceGrid.CutMode.CutImmediately">
            <summary>
            Cut enabled, the data are removed immediately when cutting the data source.
            </summary>
        </member>
        <member name="T:SourceGrid.TrimmingMode">
            <summary>
            String trimming mode
            </summary>
        </member>
        <member name="F:SourceGrid.ClipboardMode.Copy">
            <summary>
            Copy using Ctrl+C
            </summary>
        </member>
        <member name="F:SourceGrid.ClipboardMode.Cut">
            <summary>
            Cut using Ctrl+X
            </summary>
        </member>
        <member name="F:SourceGrid.ClipboardMode.Paste">
            <summary>
            Paste using Ctrl+V
            </summary>
        </member>
        <member name="F:SourceGrid.ClipboardMode.Delete">
            <summary>
            Delete using Del key
            </summary>
        </member>
        <member name="T:SourceGrid.CellOptimizeMode">
            <summary>
            Optimize mode used when constructing the grid control.
            </summary>
        </member>
        <member name="F:SourceGrid.CellOptimizeMode.ForRows">
            <summary>
            Optimize the grid for many rows
            </summary>
        </member>
        <member name="F:SourceGrid.CellOptimizeMode.ForColumns">
            <summary>
            Optimize the grid for many columns
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.Header">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.Header.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Header">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Header.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Header.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="cellValue"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.SortableHeader">
            <summary>
            A behavior that support sort and resize. Once created cannot be modified. When calculated automatically the range to sort is all the grid range without the rows minor of the current row and the range header is all the grid range with the rows minor or equal of the current row
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.SortableHeader.Default">
            <summary>
            Column header behavior with sort and resize support, same as SortResizeHeader.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.SortableHeader.LogicalBorder">
            <summary>
            Border used to calculate the region where the sort is enabled.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.SortableHeader.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.SortableHeader.#ctor(SourceGrid.IRangeLoader,SourceGrid.IRangeLoader)">
            <summary>
            Constructor
            </summary>
            <param name="p_RangeToSort">If null then the range is automatically calculated.</param>
            <param name="p_HeaderRange">If null then the range is automatically calculated.</param>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.SortableHeader.m_RangeToSort">
            <summary>
            Range to sort
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.SortableHeader.m_HeaderRange">
            <summary>
            Header range (can be null).
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.SortableHeader.IsSortEnable(SourceGrid.CellContext)">
            <summary>
            Indicates if for the specified cell the sort is enabled.
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.SortableHeader.SortColumn(SourceGrid.CellContext,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort the current column. If the range contains all the columns this method move directly the row object otherwise move each cell.
            </summary>
            <param name="sender"></param>
            <param name="p_bAscending"></param>
            <param name="p_Comparer"></param>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.SortableHeader.RangeToSort">
            <summary>
            Range to sort. If null and EnableSort is true the range is automatically calculated.
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.Controllers.SortableHeader.RangeHeader">
            <summary>
            Header range. If null and EnableSort is true the range is automatically calculated.
            </summary>
        </member>
        <member name="T:SourceGrid.Exporter.CSV">
            <summary>
            An utility class to export a grid to a csv delimited format file.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.IToolTipText">
            <summary>
            Interface for informations about a tooltiptext
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IToolTipText.GetToolTipText(SourceGrid.CellContext)">
            <summary>
            Get the tooltiptext of the specified cell
            </summary>
            <param name="cellContext"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.MouseInvalidate">
            <summary>
            A behavior that invalidate the cell on mouse events
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.MouseInvalidate.Default">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseInvalidate.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseInvalidate.OnMouseDown(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseInvalidate.OnMouseUp(SourceGrid.CellContext,System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseInvalidate.OnMouseEnter(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.MouseInvalidate.OnMouseLeave(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.MouseSelection">
            <summary>
            A cell controller used to handle mouse selection
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.Unselectable">
            <summary>
            Implements a behavior that cannot receive the focus. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="T:SourceGrid.LinkedControlsList">
            <summary>
            A dictionary with keys of type Control and values of type LinkedControlValue
            </summary>
        </member>
        <member name="T:SourceGrid.LinkedControlScrollMode">
            <summary>
            Determine the scrolling mode of the linked controls.
            </summary>
        </member>
        <member name="T:SourceGrid.LinkedControlValue">
            <summary>
            Linked control value
            </summary>
        </member>
        <member name="M:SourceGrid.LinkedControlValue.#ctor(System.Windows.Forms.Control,SourceGrid.Position)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid.LinkedControlValue.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.LinkedControlValue.Position">
            <summary>
            Gets or sets the position of the linked control.
            </summary>
        </member>
        <member name="P:SourceGrid.LinkedControlValue.UseCellBorder">
            <summary>
            Gets or sets if show the cell border. True to insert the editor control inside the border of the cell, false to put the editor control over the entire cell. If you use true remember to set EnableCellDrawOnEdit == true.
            </summary>
        </member>
        <member name="P:SourceGrid.LinkedControlValue.ScrollMode">
            <summary>
            Gets or sets the scrolling mode of the control.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Views.MultiImages">
            <summary>
            Summary description for VisualModelCheckBox.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.MultiImages.#ctor">
            <summary>
            Use default setting
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Views.MultiImages.#ctor(SourceGrid.Cells.Views.MultiImages)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SourceGrid.Cells.Views.MultiImages.Clone">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Views.MultiImages.SubImages">
            <summary>
            Images of the cells
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Editors.NumericUpDown">
            <summary>
            EditorNumericUpDown editor class.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.NumericUpDown.#ctor">
            <summary>
            Create a model of type Decimal
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Editors.NumericUpDown.CreateControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Editors.NumericUpDown.SetEditValue(System.Object)">
            <summary>
            Set the specified value in the current editor control.
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="M:SourceGrid.Cells.Editors.NumericUpDown.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.Cells.Editors.NumericUpDown.Control">
            <summary>
            Gets the control used for editing the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Controllers.ToolTipText">
            <summary>
            Allow to customize the tooltiptext of a cell. This class read the tooltiptext from the ICellToolTipText.GetToolTipText.  This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid.Cells.Controllers.ToolTipText.Default">
            <summary>
            Default tooltiptext
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ToolTipText.ApplyToolTipText(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Change the cursor with the cursor of the cell
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid.Cells.Controllers.ToolTipText.ResetToolTipText(SourceGrid.CellContext,System.EventArgs)">
            <summary>
            Reset the original cursor
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid.RangeRegion">
            <summary>
            RangeRegion is a collection of range that are never overlying each other.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeRegion.#ctor(SourceGrid.RangeRegion)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:SourceGrid.RangeRegion.GetCellsPositions">
            <summary>
            Returns a Collection of cells that represents the current class
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.GetRowsIndex">
            <summary>
            Returns all the selected rows index
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.GetColumnsIndex">
            <summary>
            Returns all the selected columns index
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.Position)">
            <summary>
            Indicates if the specified cell is selected
            </summary>
            <param name="p_Cell"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.Range)">
            <summary>
            Indicates if the specified range of cells is selected
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Contains(SourceGrid.RangeRegion)">
            <summary>
            Indicates if the specified range of cells is selected
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.ContainsRow(System.Int32)">
            <summary>
            Indicates if the specified row is selected
            </summary>
            <param name="p_Row"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.ContainsColumn(System.Int32)">
            <summary>
            Indicates if the specified column is selected
            </summary>
            <param name="p_Column"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.IntersectsWith(SourceGrid.Range)">
            <summary>
            Indicates if the specified range of cells is selected
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Intersect(SourceGrid.Range)">
            <summary>
            Returns a non contiguous range of cells of the intersection between the current range and the specified range.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Exclude(SourceGrid.Range)">
            <summary>
            Returns the cells of the current range that don't intersect with the specified range
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Clear">
            <summary>
            Remove all the cells
            </summary>
        </member>
        <member name="M:SourceGrid.RangeRegion.Clear(SourceGrid.Range)">
            <summary>
            Remove all the cells excluse the specified range
            </summary>
            <param name="pRangeToLeave"></param>
        </member>
        <member name="M:SourceGrid.RangeRegion.ResetRange">
            <summary>
            Reset the object to its original state. It is similar to the Clear method but doesn't call any events when removeing the saved positions, usually used when refreshing the cells with new data.
            To simply clear the object use the Clear method, only use this method when you want to force a reset of the object without calling additional methods.
            </summary>
        </member>
        <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.Position)">
            <summary>
            Add the specified cell and add the cell to the collection.
            </summary>
            <param name="pCell"></param>
            <returns>Returns true if sucesfully added</returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.Position)">
            <summary>
            Remove from the collection the specified cell
            </summary>
            <param name="pCell"></param>
            <returns>Returns true if sucesfully removed</returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.Range)">
            <summary>
            Add the specified Range of cells
            </summary>
            <param name="pRange"></param>
            <returns>Returns true if sucesfully added</returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.Range)">
            <summary>
            Remove from the collection the specified range of cells
            </summary>
            <param name="pRange"></param>
            <returns>Returns true if sucesfully removed</returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Add(SourceGrid.RangeRegion)">
            <summary>
            Add the specified ranges of cells
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.Remove(SourceGrid.RangeRegion)">
            <summary>
            Remove the specified ranges of cells
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.InternalAdd(SourceGrid.RangeRegion)">
            <summary>
            Prende un range che è già stato filtrato con solo le celle non presenti nell'attuale range
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.RangeRegion.InternalRemove(SourceGrid.RangeRegion)">
            <summary>
            Prende un range che è già stato filtrato con solo le celle presenti nell'attuale range
            </summary>
            <param name="pRange"></param>
            <returns></returns>
        </member>
        <member name="F:SourceGrid.RangeRegion.m_bValidated">
            <summary>
            Variabile che indica se lo stato interno della classe è stato modificato, serve per poter ottimizzare alcune verifiche.
            </summary>
        </member>
        <member name="P:SourceGrid.RangeRegion.Item(System.Int32)">
            <summary>
            Returns the range at the specific position
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Models.IValueModel">
            <summary>
            A Model interface specific to contain the value of the cell.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.IValueModel.GetValue(SourceGrid.CellContext)">
            <summary>
            Get the value of the cell at the specified position
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.IValueModel.SetValue(SourceGrid.CellContext,System.Object)">
            <summary>
            Set the value of the cell at the specified position. This method must call OnValueChanging and OnValueChanged() event.
            </summary>
            <param name="cellContext"></param>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.NullValueModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Models.ValueModel">
            <summary>
            A model that contains the value of cell. Usually used for a Real Cell or cells with a static text.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.ValueModel.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:SourceGrid.Cells.Models.CheckBox">
            <summary>
            CheckBox model.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Models.CheckBox.GetCheckBoxStatus(SourceGrid.CellContext)">
            <summary>
            Constructor
            </summary>
            <param name="cellContext"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.Cells.Models.CheckBox.SetCheckedValue(SourceGrid.CellContext,System.Nullable{System.Boolean})">
            <summary>
            Set the checked value
            </summary>
            <param name="cellContext"></param>
            <param name="pChecked"></param>
        </member>
        <member name="M:SourceGrid.Cells.Models.Image.GetImage(SourceGrid.CellContext)">
            <summary>
            Get the image of the specified cell. 
            </summary>
            <param name="cell"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid.Cells.Models.ValueImage">
            <summary>
            Model that implements the IImage interface, used to read the Image directly from the Value of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.ValueCellComparer">
            <summary>
            A comparer for the Cell class. (Not for CellVirtual). Using the value of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.MultiColumnsComparer">
            <summary>
            A comparer used to sort more than one columns.
            </summary>
        </member>
        <member name="T:SourceGrid.DisplayStringCellComparer">
            <summary>
            A comparer for the Cell class. (Not for CellVirtual). Using the DisplayString of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid.RangeCollection">
            <summary>
            A collection of elements of type Range
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.Virtual.CheckBox">
            <summary>
            A Cell with a CheckBox. This Cell is of type bool. Abstract, you must override GetValue and SetValue.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.Virtual.CheckBox.#ctor">
            <summary>
            Constructor of a CheckBox style cell. You must st a valid Model to use this type of cell with this constructor.
            </summary>
        </member>
        <member name="T:SourceGrid.Cells.CheckBox">
            <summary>
            A Cell with a CheckBox. This Cell is of type bool.
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.CheckBox.#ctor">
            <summary>
            Constrcutor
            </summary>
        </member>
        <member name="M:SourceGrid.Cells.CheckBox.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Construct a CellCheckBox class with caption and align checkbox in the MiddleLeft, using BehaviorModels.CheckBox.Default
            </summary>
            <param name="caption"></param>
            <param name="checkValue"></param>
        </member>
        <member name="P:SourceGrid.Cells.CheckBox.Checked">
            <summary>
            Checked status (equal to the Value property but returns a bool)
            </summary>
        </member>
        <member name="P:SourceGrid.Cells.CheckBox.Caption">
            <summary>
            Caption of the cell
            </summary>
        </member>
        <member name="T:SourceGrid.CellContext">
            <summary>
            Structure that represents a logical cell, composed by a ICellVirtual, a Position and a GridVirtual.
            This is an important structure used to manipulate the cell object, both virtual and real.
            </summary>
        </member>
        <member name="F:SourceGrid.CellContext.Empty">
            <summary>
            An empty CellContext instance.
            </summary>
        </member>
        <member name="M:SourceGrid.CellContext.#ctor(SourceGrid.GridVirtual,SourceGrid.Position,SourceGrid.Cells.ICellVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="pGridVirtual"></param>
            <param name="pPosition"></param>
            <param name="pCell"></param>
        </member>
        <member name="M:SourceGrid.CellContext.#ctor(SourceGrid.GridVirtual,SourceGrid.Position)">
            <summary>
            Constructor
            </summary>
            <param name="pGridVirtual"></param>
            <param name="pPosition"></param>
        </member>
        <member name="M:SourceGrid.CellContext.Measure(System.Drawing.Size)">
            <summary>
            If the cell is not linked to a grid the result is not accurate (Font can be null). Call InternalGetRequiredSize with RowSpan and ColSpan = 1.
            </summary>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.StartEdit">
            <summary>
            Start the edit operation with the current editor specified in the Model property.
            </summary>
        </member>
        <member name="M:SourceGrid.CellContext.EndEdit(System.Boolean)">
            <summary>
            Terminate the edit operation.
            </summary>
            <param name="cancel">If true undo all the changes</param>
            <returns>Returns true if the edit operation is successfully terminated, otherwise false</returns>
        </member>
        <member name="M:SourceGrid.CellContext.IsEditing">
            <summary>
            True if this cell is currently in edit state, otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.CanBeDrawn">
            <summary>
            True is the cell can be drawn (usually if the cell is in editing state the drawing code is disabled)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.Invalidate">
            <summary>
            Invalidate this cell
            </summary>
        </member>
        <member name="M:SourceGrid.CellContext.IsEmpty">
            <summary>
            Returns true if the current struct is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.Equals(SourceGrid.CellContext)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.op_Equality(SourceGrid.CellContext,SourceGrid.CellContext)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.op_Inequality(SourceGrid.CellContext,SourceGrid.CellContext)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid.CellContext.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.CellContext.DisplayText">
            <summary>
            Gets the string representation of the Model.ValueModel.GetValue method (default ToString())
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid.CellContext.Value">
            <summary>
            Gets or sets the cell value.
            </summary>
        </member>
        <member name="P:SourceGrid.CellContext.CellRange">
            <summary>
            Calculate the Range occupied by the current cell. Usually it is simply the Position property, only if RowSpan or ColumnSpan is used this property returns a larger range.
            Internally use the Grid.PositionToCellRange method.
            </summary>
        </member>
    </members>
</doc>
